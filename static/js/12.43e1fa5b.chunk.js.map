{"version":3,"file":"static/js/12.43e1fa5b.chunk.js","mappings":"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","sources":["components/Accordion.js","components/AccordionDetails.js","components/AccordionSummary.js","components/AddButton.js","components/ConfigurationResult.js","components/ElementWithHelp.js","components/FilterGroups.js","inputs/AppSlider.js","filters/BatteryFilter.js","filters/NumberFilter.js","filters/SpeedFilter.js","filters/GpsAccuracyFilter.js","filters/TimerStateFilter.js","inputs/AppTimePicker.js","filters/TimespanFilter.js","filters/PositionFilter.js","filters/BikeRadarFilter.js","filters/StartLocationFilter.js","filters/ProfileNameFilter.js","filters/LightsModeFilter.js","components/Filters.js","components/IndividualLightNetwork.js","components/ButtonGroup.js","components/LightPanel.js","components/LightSettings.js","components/LightConfiguration.js","components/LightIconTapBehavior.js","components/LightModeSelection.js","components/LightsPaper.js","components/ParseConfiguration.js","components/ColorIcon.js","components/Templates.js","inputs/AppCheckbox.js","inputs/AppInputHelp.js","inputs/AppSelect.js","inputs/AppTextInput.js"],"sourcesContent":["import Accordion from '@mui/material/Accordion';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nexport default styled(Accordion)(({ theme }) => ({\r\n  border: `1px solid ${theme.palette.divider}`,\r\n  boxShadow: 'none',\r\n  '&:not(:last-child)': {\r\n    borderBottom: 0,\r\n  },\r\n  '&:before': {\r\n    display: 'none',\r\n  },\r\n  '& .MuiAccordion-root.Mui-expanded': {\r\n    margin: 'auto'\r\n  },\r\n  '&.MuiAccordion-root': {\r\n    margin: 0\r\n  }\r\n}));","import AccordionDetails from '@mui/material/AccordionDetails';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nexport default styled(AccordionDetails)(({ theme }) => ({\r\n  padding: theme.spacing(2)\r\n}));","import React from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport AccordionSummary from '@mui/material/AccordionSummary';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\r\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport Typography from '@mui/material/Typography';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\r\nimport Grid from '@mui/material/Grid';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst GridValid = styled(Grid)(() => ({\r\n  display: 'flex',\r\n  alignItems: 'center'\r\n}));\r\n\r\nconst GridInvalid = styled(Grid)(() => ({\r\n  color: '#f44336',\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  alignItems: 'center'\r\n}));\r\n\r\nconst StyledAccordionSummary = styled((props) => (\r\n  <AccordionSummary\r\n    style={{minHeight: 56}}\r\n    expandIcon={<ExpandMoreIcon />}\r\n    {...props}\r\n  />\r\n))(({ theme }) => ({\r\n  backgroundColor: theme.palette.mode === 'dark'\r\n    ? 'rgba(255, 255, 255, .05)'\r\n    : 'rgba(0, 0, 0, .03)',\r\n  borderBottom: `1px solid ${theme.palette.divider}`,\r\n  marginBottom: -1,\r\n  '& .MuiAccordionSummary-content.Mui-expanded': {\r\n    margin: '0px 0',\r\n    [theme.breakpoints.only('xs')]: {\r\n      margin: '12px 0',\r\n    }\r\n  },\r\n  '& .MuiAccordionSummary-content': {\r\n    margin: '0px 0',\r\n    [theme.breakpoints.only('xs')]: {\r\n      margin: '12px 0',\r\n    }\r\n  }\r\n}));\r\n\r\nexport default observer(({ item, param1, removeLabel, removeCallback, moveUpCallback, canMoveUpCallback,\r\n  canMoveDownCallback, moveDownCallback, validationParameter, validationParameter2 }) => {\r\n\r\n  const isValid = validationParameter2\r\n    ? item.isValid(validationParameter, validationParameter2)\r\n    : item.isValid(validationParameter);\r\n\r\n  return (\r\n    <StyledAccordionSummary\r\n      aria-controls={item.id}\r\n      id={item.id}\r\n    >\r\n      <div style={{ width: '100%' }}>\r\n        <Grid container>\r\n          <Grid item xs={9} sm={3}>\r\n            <FormControlLabel\r\n              label=\"\"\r\n              onClick={(event) => event.stopPropagation()}\r\n              onFocus={(event) => event.stopPropagation()}\r\n              control={\r\n                <IconButton aria-label=\"delete\" onClick={() => removeCallback(item)} size=\"large\">\r\n                  <DeleteIcon />\r\n                </IconButton>\r\n              }\r\n            />\r\n            {\r\n              canMoveUpCallback(item)\r\n              ? <FormControlLabel\r\n                  label=\"\"\r\n                  onClick={(event) => event.stopPropagation()}\r\n                  onFocus={(event) => event.stopPropagation()}\r\n                  control={\r\n                    <IconButton onClick={() => moveUpCallback(item)} size=\"large\">\r\n                      <ArrowUpwardIcon />\r\n                    </IconButton>\r\n                  } />\r\n              : null\r\n            }\r\n            {\r\n              canMoveDownCallback(item)\r\n              ? <FormControlLabel\r\n                  label=\"\"\r\n                  onClick={(event) => event.stopPropagation()}\r\n                  onFocus={(event) => event.stopPropagation()}\r\n                  control={\r\n                    <IconButton edge=\"end\" onClick={() => moveDownCallback(item)} size=\"large\">\r\n                      <ArrowDownwardIcon />\r\n                    </IconButton>\r\n                  } />\r\n              : null\r\n            }\r\n          </Grid>\r\n          {\r\n            isValid\r\n            ? <GridValid item xs={10} sm={8}>\r\n                <Typography>{item.getDisplayName(param1)}</Typography>\r\n              </GridValid>\r\n            : <GridValid item xs={1} sm={8}>\r\n              </GridValid>\r\n          }\r\n          <GridInvalid item xs={2} sm={1}>\r\n          { isValid ? null : <ErrorOutlineIcon /> }\r\n          </GridInvalid>\r\n        </Grid>\r\n      </div>\r\n    </StyledAccordionSummary>\r\n  );\r\n});","import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport { styled } from '@mui/material/styles';\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\nexport default styled((props) => (\r\n  <Button\r\n    variant=\"contained\"\r\n    color=\"secondary\"\r\n    startIcon={<AddIcon />}\r\n    {...props}\r\n  />\r\n))(({ theme }) => ({\r\n  margin: theme.spacing(1)\r\n}));","import React from 'react';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport Alert from '@mui/material/Alert';\r\nimport { observer } from 'mobx-react-lite'\r\nimport AppTextInput from '../inputs/AppTextInput';\r\n\r\nexport default observer(({ configuration, deviceList, ...props }) => {\r\n  const configurationValue = configuration.isValid(deviceList) ? configuration.getConfigurationValue(deviceList) : null;\r\n\r\n  return (\r\n    <Card {...props}>\r\n      <CardHeader\r\n        sx={{padding: 2}}\r\n        title=\"Lights Configuration\"\r\n        titleTypographyProps={{ align: 'center' }}\r\n      />\r\n      <CardContent>\r\n        <Typography gutterBottom>\r\n        When the lights are configured, copy the below value and paste it in the application setting \"Lights Configuration\" by using \r\n        Garmin Connect Mobile or Garmin Express.\r\n        </Typography>\r\n        {\r\n          configurationValue && configurationValue.length > 256 ?\r\n            <Typography sx={{ fontWeight: 'bold' }} gutterBottom>\r\n            NOTE: Do not use Garmin Express Mac as it is limited to 256 characters.\r\n            </Typography>\r\n          : null\r\n        }\r\n        { configurationValue ?\r\n          <React.Fragment>\r\n            <Grid item xs={12} sm={12}>\r\n              <AppTextInput value={configurationValue} allowAllCharacters={true} />\r\n            </Grid>\r\n            <Grid item sx={{ marginTop: 4 }} xs={12} sm={12}>\r\n              <Button variant=\"contained\" onClick={() => {navigator.clipboard.writeText(configurationValue)}}>Copy to clipboard</Button>\r\n            </Grid>\r\n          </React.Fragment>\r\n          :\r\n          <Grid item xs={12} sm={12}>\r\n            <Alert severity=\"error\">Please fill the missing fields.</Alert>\r\n          </Grid>\r\n        }\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport { nanoid } from 'nanoid';\r\nimport Card from '@mui/material/Card';\r\nimport HelpIcon from '@mui/icons-material/Help';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Popper from '@mui/material/Popper';\r\n\r\nconst PREFIX = 'ElementWithHelp';\r\n\r\nconst classes = {\r\n  root: `${PREFIX}-root`\r\n};\r\n\r\nconst Root = styled('div')(() => ({\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  flexWrap: 'wrap'\r\n}));\r\n\r\nexport default function ElementWithHelp({ element, help, className, ...props }) {\r\n  const id = nanoid();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(anchorEl ? null : event.currentTarget);\r\n  };\r\n  const open = Boolean(anchorEl);\r\n  const popperId = open ? `help-${id}` : undefined;\r\n\r\n  return (\r\n    <Root {...props} className={`${classes.root} ${className ? className : ''}`}>\r\n      {element}\r\n      <IconButton onClick={handleClick} size=\"large\">\r\n        <HelpIcon color=\"primary\" style={{ fontSize: 30, cursor: 'pointer' }} />\r\n        <Popper placement=\"bottom\" id={popperId} open={open} anchorEl={anchorEl}>\r\n          <Card\r\n            sx={{\r\n              maxWidth: 600,\r\n              overflow: 'auto'\r\n            }}>\r\n            <CardContent>\r\n              {help}\r\n            </CardContent>\r\n          </Card>\r\n        </Popper>\r\n      </IconButton>\r\n    </Root>\r\n  );\r\n}","import React, { useEffect } from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport List from '@mui/material/List';\r\nimport Accordion from './Accordion';\r\nimport AccordionSummary from './AccordionSummary';\r\nimport AccordionDetails from './AccordionDetails';\r\nimport Typography from '@mui/material/Typography';\r\nimport { action } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport FilterGroup from '../models/FilterGroup';\r\nimport Filter from '../models/Filter';\r\nimport Filters from './Filters';\r\nimport AddButton from './AddButton';\r\nimport { filterList, arrayMoveUp, arrayMoveDown } from '../constants';\r\n\r\nconst emptyFilters = [];\r\nconst getFilterTypes = (hasLightModes, device, totalLights) => {\r\n  if (!device) {\r\n    return emptyFilters;\r\n  }\r\n\r\n  const excludeList = ['N' /* Lights modes */];\r\n  if (!hasLightModes) {\r\n    excludeList.push('B'); // Exclude light battery\r\n  }\r\n\r\n  if (!device.highMemory) {\r\n    excludeList.push('F'); // Exclude position\r\n  }\r\n\r\n  if (!device.bikeRadar || (!device.highMemory && totalLights > 1)) {\r\n    excludeList.push('I'); // Exclude bike radar\r\n  }\r\n\r\n  if (!device.profileName) {\r\n    excludeList.push('K'); // Exclude profile name\r\n  }\r\n\r\n  if (!device.highMemory || !device.barometer) {\r\n    excludeList.push('L'); // Exclude gradient\r\n  }\r\n\r\n  if (!device.highMemory || !device.solar) {\r\n    excludeList.push('M'); // Exclude solar intensity\r\n  }\r\n\r\n  return !excludeList.length\r\n    ? filterList\r\n    : filterList.filter(f => excludeList.indexOf(f.id) < 0);\r\n};\r\n\r\nexport default observer(({ filterGroups, lightData, device, totalLights }) => {\r\n  const lightModes = lightData?.modes;\r\n  const [filterTypes, setFilterTypes] = React.useState(getFilterTypes(lightModes, device, totalLights));\r\n\r\n  const createFilterGroup = action(() => {\r\n    filterGroups.push(new FilterGroup(!!lightModes));\r\n  });\r\n  const removeFilterGroup = action((filterGroup) => {\r\n    filterGroups.remove(filterGroup);\r\n  });\r\n  const createFilter = action((filterGroup) => {\r\n    filterGroup.filters.push(new Filter());\r\n  });\r\n  const handleChange = (filterGroup) => {\r\n    filterGroup.setOpen(!filterGroup.open);\r\n  };\r\n  const canMoveUpFilterGroup = (filterGroup) => {\r\n    return filterGroups.indexOf(filterGroup) > 0;\r\n  };\r\n  const moveUpFilterGroup = action((filterGroup) => {\r\n    arrayMoveUp(filterGroups, filterGroup);\r\n  });\r\n  const canMoveDownFilterGroup = (filterGroup) => {\r\n    return filterGroups.indexOf(filterGroup) < (filterGroups.length - 1);\r\n  };\r\n  const moveDownFilterGroup = action((filterGroup) => {\r\n    arrayMoveDown(filterGroups, filterGroup);\r\n  });\r\n\r\n  useEffect(\r\n    () => {\r\n      setFilterTypes(getFilterTypes(lightModes, device, totalLights));\r\n    },\r\n    [lightModes, device, totalLights]\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      filterGroups.forEach(filterGroup => {\r\n        filterGroup.filters.forEach(filter => {\r\n          if (!filterTypes.find(t => t.id === filter.type)) {\r\n            filter.setType(null);\r\n          }\r\n        });\r\n      })\r\n    },\r\n    [filterTypes, filterGroups]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <List sx={{ padding: 0 }}>\r\n        {filterGroups.map(filterGroup => (\r\n        <Accordion key={filterGroup.id}\r\n              TransitionProps={{ unmountOnExit: true }}\r\n              expanded={filterGroup.open}\r\n              onChange={() => handleChange(filterGroup)}>\r\n          <AccordionSummary\r\n            item={filterGroup}\r\n            param1={lightModes}\r\n            removeLabel=\"Remove group\"\r\n            removeCallback={removeFilterGroup}\r\n            validationParameter={device}\r\n            validationParameter2={lightData}\r\n            canMoveUpCallback={canMoveUpFilterGroup}\r\n            moveUpCallback={moveUpFilterGroup}\r\n            canMoveDownCallback={canMoveDownFilterGroup}\r\n            moveDownCallback={moveDownFilterGroup}\r\n          />\r\n          <AccordionDetails>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} sm={6}>\r\n                <AppTextInput\r\n                  label=\"Group name\"\r\n                  setter={filterGroup.setName}\r\n                  value={filterGroup.name}\r\n                  help={\r\n                    <Typography>\r\n                    The group name will be displayed above the light icon when the filter group is matched. Note that the name won't be displayed in case\r\n                    there is not enough space above the light icon.\r\n                  </Typography>\r\n                  }\r\n                />\r\n              </Grid>\r\n              {\r\n                lightModes ? (\r\n                  <React.Fragment>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <AppSelect required items={lightModes} label=\"Light mode\" setter={filterGroup.setLightMode} value={filterGroup.lightMode} />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <AppTextInput\r\n                        type=\"number\"\r\n                        label=\"Activation delay in seconds\"\r\n                        setter={filterGroup.setActivationDelay}\r\n                        value={filterGroup.activationDelay}\r\n                        help={\r\n                          <Typography>\r\n                            It will postpone the light mode activation for the given delay. (e.g. change the light mode after the timer has been paused for five seconds)\r\n                          </Typography>\r\n                        }\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <AppTextInput\r\n                        type=\"number\"\r\n                        label=\"Deactivation delay in seconds\"\r\n                        setter={filterGroup.setDeactivationDelay}\r\n                        value={filterGroup.deactivationDelay}\r\n                        help={\r\n                          <Typography>\r\n                            It will postpone the light mode deactivation for the given delay. (e.g. keep the brake light mode for two more seconds after finishing braking)\r\n                          </Typography>\r\n                        }\r\n                      />\r\n                    </Grid>\r\n                  </React.Fragment>\r\n                )\r\n                : null\r\n              }\r\n              <Grid item xs={12} sm={12}>\r\n                <Typography variant=\"h5\" gutterBottom>Filters</Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <div>\r\n              <Filters filters={filterGroup.filters} filterTypes={filterTypes} device={device} />\r\n            </div>\r\n            <AddButton onClick={() => createFilter(filterGroup)}>\r\n              Add Filter\r\n            </AddButton>\r\n          </AccordionDetails>\r\n        </Accordion>\r\n        ))}\r\n      </List>\r\n      <div>\r\n        <AddButton onClick={createFilterGroup}>\r\n          Add Filter Group\r\n        </AddButton>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import { useEffect } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { styled } from '@mui/material/styles';\r\nimport PropTypes from 'prop-types';\r\nimport Slider from '@mui/material/Slider';\r\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip';\r\nimport Typography from '@mui/material/Typography';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst BootstrapTooltip = styled(({ className, ...props }) => (\r\n  <Tooltip {...props} arrow classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.arrow}`]: {\r\n    color: theme.palette.primary.dark,\r\n  },\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n    fontSize: '14px'\r\n  },\r\n}));\r\n\r\nfunction ValueLabelComponent(props) {\r\n  const { children, open, value } = props;\r\n\r\n  return (\r\n    <BootstrapTooltip arrow open={open} enterTouchDelay={0} placement=\"top\" title={value}>\r\n      {children}\r\n    </BootstrapTooltip>\r\n  );\r\n}\r\n\r\nValueLabelComponent.propTypes = {\r\n  children: PropTypes.element.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nconst Root = styled('div')({\r\n  width: '100%',\r\n});\r\n\r\nexport default observer(({ label, value, setter, getLabelText, step, min, max, defaultValue, disabled }) => {\r\n  const id = nanoid();\r\n  const handleChange = (event, newValue) => {\r\n    setter(newValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (value == null) {\r\n      setter(defaultValue);\r\n    }\r\n  }, [value, defaultValue, setter])\r\n\r\n  return (\r\n    <Root>\r\n      <Typography id={id} gutterBottom>{label}</Typography>\r\n      <Slider\r\n        disabled={disabled}\r\n        step={step}\r\n        min={min}\r\n        max={max}\r\n        marks\r\n        aria-labelledby={id}\r\n        components={{\r\n          ValueLabel: ValueLabelComponent\r\n        }}\r\n        valueLabelFormat={getLabelText}\r\n        valueLabelDisplay=\"auto\"\r\n        value={value}\r\n        onChange={handleChange} />\r\n    </Root>\r\n  );\r\n});\r\n","import Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppSlider from '../inputs/AppSlider';\r\nimport { operatorList, batteryStateList, getBatteryOperator, getBatteryValue } from '../constants';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(({ filter }) => {\r\n  const getLabelText = (value) => {\r\n    return batteryStateList[value];\r\n  };\r\n  const setValue = (value) => {\r\n    filter.setValue(getBatteryValue(value));\r\n  };\r\n  const setOperator = (value) => {\r\n    filter.setOperator(getBatteryOperator(value));\r\n  };\r\n\r\n  return (\r\n  <Grid container spacing={3}>\r\n    <Grid item xs={12} sm={12}>\r\n      <Typography>\r\n      NOTE: The battery state is not defined in percentage but rather as a number from one to five, where number one is \"New\" and five is \"Bad\".\r\n      Each number represents a percentage range (e.g. 50%-75%), where the range for each number may differ from light to light.\r\n      </Typography>\r\n    </Grid>\r\n    <Grid item xs={12} sm={4}>\r\n      <AppSelect required items={operatorList} label=\"Operator\" setter={setOperator} value={getBatteryOperator(filter.operator)} />\r\n    </Grid>\r\n    <Grid item xs={12} sm={8}>\r\n      <AppSlider\r\n        label=\"Battery state\"\r\n        setter={setValue}\r\n        value={getBatteryValue(filter.value)}\r\n        getLabelText={getLabelText}\r\n        step={1}\r\n        min={1}\r\n        max={6}\r\n        defaultValue={2}\r\n      />\r\n    </Grid>\r\n  </Grid>\r\n  );\r\n});\r\n","import Grid from '@mui/material/Grid';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport { operatorList } from '../constants';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(({ label, filter, note }) => {\r\n  return (\r\n  <Grid container spacing={3}>\r\n    {\r\n      note != null ?\r\n      <Grid item xs={12} sm={12}>\r\n        {note}\r\n      </Grid>\r\n      : null\r\n    }\r\n    <Grid item xs={12} sm={4}>\r\n      <AppSelect required items={operatorList} label=\"Operator\" setter={filter.setOperator} value={filter.operator} />\r\n    </Grid>\r\n    <Grid item xs={12} sm={8}>\r\n      <AppTextInput required label={label} type=\"number\" setter={filter.setValue} value={filter.value} />\r\n    </Grid>\r\n  </Grid>\r\n  );\r\n});\r\n","import React, { useContext, useEffect } from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport { operatorList, speedUnitList } from '../constants';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { AppContext } from '../AppContext';\r\n\r\nexport default observer(({ filter }) => {\r\n  const { configuration } = useContext(AppContext);\r\n  const units = configuration.units;\r\n  const [speed, setSpeed] = React.useState(null);\r\n  const setFilterValue = (speed) => {\r\n    let mps = null;\r\n    if (speed !== '' && !Number.isNaN(speed)) {\r\n      mps = units === 1 /* Statute */\r\n        ? speed * 0.44704\r\n        : speed * 0.27777777777778;\r\n    }\r\n\r\n    filter.setValue(mps === null ? null : Math.round(mps * 100000) / 100000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let newSpeed = null;\r\n    if (filter.value !== null && !Number.isNaN(filter.value)) {\r\n      newSpeed = units === 0 /* Metric */\r\n        ? filter.value * 3.6\r\n        : filter.value * 2.236934;\r\n    }\r\n\r\n    setSpeed(newSpeed === null ? null : Math.round(newSpeed * 100) / 100);\r\n  }, [units, filter.value]);\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12} sm={4}>\r\n        <AppSelect required items={operatorList} label=\"Operator\" setter={filter.setOperator} value={filter.operator} /> \r\n      </Grid>\r\n      <Grid item xs={12} sm={5}>\r\n        <AppTextInput required label=\"Speed\" type=\"number\" setter={setFilterValue} value={speed} />\r\n      </Grid>\r\n      <Grid item xs={12} sm={3}>\r\n        <AppSelect items={speedUnitList} label=\"Units\" value={units} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n});","import Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppSlider from '../inputs/AppSlider';\r\nimport { operatorList, gpsAccuracyList } from '../constants';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(({ filter }) => {\r\n  const getLabelText = (value) => {\r\n    return gpsAccuracyList[value];\r\n  };\r\n\r\n  return (\r\n  <Grid container spacing={3}>\r\n    <Grid item xs={12} sm={12}>\r\n    <Typography variant=\"h6\">Values:</Typography>\r\n      <ul>\r\n        <li><Typography variant=\"button\">N/A</Typography> - GPS is not available</li>\r\n        <li><Typography variant=\"button\">Last</Typography> - The Location is based on the last known GPS fix</li>\r\n        <li><Typography variant=\"button\">Poor</Typography> - The Location was calculated with a poor GPS fix. Only a 2-D GPS fix is available, likely due to a limited number of tracked satellites</li>\r\n        <li><Typography variant=\"button\">Ok</Typography> - The Location was calculated with a usable GPS fix. A 3-D GPS fix is available, with marginal HDOP (horizontal dilution of precision)</li>\r\n        <li><Typography variant=\"button\">Good</Typography> - The Location was calculated with a good GPS fix. A 3-D GPS fix is available, with good-to-excellent HDOP (horizontal dilution of precision)</li>\r\n      </ul>\r\n    </Grid>\r\n    <Grid item xs={12} sm={4}>\r\n      <AppSelect required items={operatorList} label=\"Operator\" setter={filter.setOperator} value={filter.operator} /> \r\n    </Grid>\r\n    <Grid item xs={12} sm={8}>\r\n      <AppSlider\r\n        label=\"Accuracy\"\r\n        setter={filter.setValue}\r\n        value={filter.value}\r\n        getLabelText={getLabelText}\r\n        step={1}\r\n        min={0}\r\n        max={4}\r\n        defaultValue={4}\r\n      />\r\n    </Grid>\r\n  </Grid>\r\n  );\r\n});","import Grid from '@mui/material/Grid';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppSlider from '../inputs/AppSlider';\r\nimport { operatorList, timerStateList } from '../constants';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(({ filter }) => {\r\n  const getLabelText = (value) => {\r\n    return timerStateList[value];\r\n  };\r\n\r\n  return (\r\n  <Grid container spacing={3}>\r\n    <Grid item xs={12} sm={4}>\r\n      <AppSelect required items={operatorList} label=\"Operator\" setter={filter.setOperator} value={filter.operator} /> \r\n    </Grid>\r\n    <Grid item xs={12} sm={8}>\r\n      <AppSlider\r\n        label=\"Timer state\"\r\n        setter={filter.setValue}\r\n        value={filter.value}\r\n        getLabelText={getLabelText}\r\n        step={1}\r\n        min={0}\r\n        max={3}\r\n        defaultValue={0}\r\n      />\r\n    </Grid>\r\n  </Grid>\r\n  );\r\n});","import { TimePicker } from '@mui/x-date-pickers';\r\nimport TextField from '@mui/material/TextField';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useContext } from 'react';\r\nimport { AppContext } from '../AppContext';\r\n\r\nexport default observer(({ label, value, setter }) => {\r\n  const context = useContext(AppContext);\r\n  const handleChange = (newValue) => {\r\n    setter(newValue);\r\n  };\r\n\r\n  if (!(value instanceof Date)) {\r\n    value = '';\r\n  }\r\n\r\n  return (\r\n    <TimePicker\r\n      ampm={context.configuration.timeFormat === 1}\r\n      label={label}\r\n      value={value}\r\n      onChange={handleChange}\r\n      renderInput={(params) => (\r\n        <TextField {...params} margin=\"normal\" variant=\"standard\" />\r\n      )}\r\n    />\r\n  );\r\n});\r\n","import React from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport AppTimePicker from '../inputs/AppTimePicker';\r\nimport { observer } from \"mobx-react-lite\"\r\nimport { timespanTypeList } from \"../constants\";\r\nimport addSeconds from \"date-fns/addSeconds\";\r\nimport startOfToday from \"date-fns/startOfToday\";\r\nimport { setSeconds, differenceInSeconds } from 'date-fns'\r\nimport { Typography } from '@mui/material';\r\n\r\nexport default observer(({ filter }) => {\r\n  const getInitValue = (type, value) => {\r\n    if (value === null) {\r\n      return null;\r\n    }\r\n\r\n    return type === '0' /* Time */\r\n      ? addSeconds(startOfToday(), value)\r\n      : value / 60;\r\n  }\r\n\r\n  const getFilterValue = (type, value) => {\r\n    if (value === null) {\r\n      return null;\r\n    }\r\n\r\n    return type === '0' /* Time */\r\n      ? differenceInSeconds(value, startOfToday())\r\n      : value * 60;\r\n  }\r\n\r\n  const [state, setState] = React.useState({ \r\n    fromValue: getInitValue(filter.fromType, filter.fromValue),\r\n    toValue: getInitValue(filter.toType, filter.toValue)\r\n  });\r\n\r\n  const setFromValue = (value) => {\r\n    value = filter.fromType === '0' /* Time */ ? setSeconds(value, 0) : value;\r\n    filter.setFromValue(getFilterValue(filter.fromType, value));\r\n    setState({ fromValue: value, toValue: state.toValue });\r\n  };\r\n  const setToValue = (value) => {\r\n    value = filter.toType === '0' /* Time */ ? setSeconds(value, 0) : value;\r\n    filter.setToValue(getFilterValue(filter.toType, value));\r\n    setState({ fromValue: state.fromValue, toValue: value });\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12} sm={12}>\r\n        <Typography>\r\n          NOTE: When using Sunset and Sunrise, the filter will start working only when a GPS position will be acquired, as it is required\r\n          to calculate the sunrise and sunset time.\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={12} sm={6}>\r\n        <AppSelect required items={timespanTypeList} label=\"From\" setter={filter.setFromType} value={filter.fromType} />\r\n      </Grid>\r\n      <Grid item xs={12} sm={6}>\r\n        {\r\n          !filter.fromType ? null\r\n          : filter.fromType === '0' ? <AppTimePicker setter={setFromValue} value={state.fromValue} />\r\n          : <AppTextInput required label=\"Offset in minutes\" type=\"number\" setter={setFromValue} value={state.fromValue} />\r\n        }\r\n      </Grid>\r\n      <Grid item xs={12} sm={6}>\r\n        <AppSelect required items={timespanTypeList} label=\"To\" setter={filter.setToType} value={filter.toType} />\r\n      </Grid>\r\n      <Grid item xs={12} sm={6}>\r\n        {\r\n          !filter.toType ? null\r\n          : filter.toType === '0' ? <AppTimePicker setter={setToValue} value={state.toValue} />\r\n          : <AppTextInput required label=\"Offset in minutes\" type=\"number\" setter={setToValue} value={state.toValue} />\r\n        }\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n});","import { useEffect } from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport { MapContainer, TileLayer, useMap } from 'react-leaflet'\r\nimport { observer } from 'mobx-react-lite';\r\nimport { action } from 'mobx';\r\nimport {featureGroup, polygon} from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport '@geoman-io/leaflet-geoman-free';\r\nimport '@geoman-io/leaflet-geoman-free/dist/leaflet-geoman.css';\r\nimport Polygon from '../models/Polygon';\r\n\r\nconst StyledMapContainer = styled(MapContainer)(() => ({\r\n  height: '400px'\r\n}));\r\n\r\nconst Polygons = observer(({ polygons }) => {\r\n  const mappings = {};\r\n  const handleDrawStart = e => {\r\n    e.workingLayer.on('pm:vertexadded', e => {\r\n      if (e.sourceTarget.getLatLngs().length >= 4) {\r\n        const polygon = map.pm.Draw.Polygon;\r\n        polygon._finishShape(e);\r\n        // Remove the last vertex if the polygon is not connected after adding the fourth vertex\r\n        if (polygon._enabled) {\r\n          polygon._removeLastVertex();\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const handleEdit = e => {\r\n    const polygon = mappings[e.layer._leaflet_id];\r\n    polygon.setVertexes(e.layer.getLatLngs()[0]);\r\n  };\r\n  const handleCreate = action(e => {\r\n    const polygon = new Polygon(e.layer.getLatLngs()[0]);\r\n    mappings[e.layer._leaflet_id] = polygon;\r\n    polygons.push(polygon);\r\n    e.layer.on('pm:edit', handleEdit);\r\n  });\r\n  const handleRemove = action(e => {\r\n    const polygon = mappings[e.layer._leaflet_id];\r\n    delete mappings[e.layer._leaflet_id];\r\n    polygons.remove(polygon);\r\n    e.layer.off('pm:edit', handleEdit);\r\n  });\r\n  const map = useMap();\r\n  useEffect(() => {\r\n    map.pm.setGlobalOptions({\r\n      snappable: false,\r\n      allowSelfIntersection: false,\r\n      hideMiddleMarkers: true\r\n    });\r\n    map.pm.addControls({\r\n      position: 'topleft',\r\n      drawCircle: false,\r\n      drawMarker: false,\r\n      drawCircleMarker: false,\r\n      drawRectangle: false,\r\n      drawPolyline: false,\r\n      cutPolygon: false\r\n    });\r\n    map.pm.Toolbar.changeActionsOfControl('Polygon', ['removeLastVertex', 'cancel']);\r\n    // Subscribe to event\r\n    map.on('pm:drawstart', handleDrawStart);\r\n    map.on('pm:create', handleCreate);\r\n    map.on('pm:remove', handleRemove);\r\n\r\n    // Draw polygons\r\n    var group = featureGroup();\r\n    polygons.forEach(p => {\r\n      const layer = polygon(p.vertexes).addTo(map);\r\n      layer.on('pm:edit', handleEdit);\r\n      mappings[layer._leaflet_id] = p;\r\n      group.addLayer(layer)\r\n    });\r\n    // Center the view\r\n    if (polygons.length) {\r\n      map.fitBounds(group.getBounds());\r\n    } else {\r\n      map.locate();\r\n      map.once('locationfound', e => {\r\n        map.zoomIn(8);\r\n        map.panTo(e.latlng);\r\n      });\r\n    }\r\n\r\n    return function cleanup() {\r\n      map.off('pm:drawstart', handleDrawStart);\r\n      map.off('pm:create', handleCreate);\r\n      map.off('pm:remove', handleRemove);\r\n    };\r\n  });\r\n\r\n  return null;\r\n});\r\n\r\nexport default observer(({ filter }) => {\r\n  return (\r\n    <StyledMapContainer center={[0, 0]} zoom={0} scrollWheelZoom={true}>\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      <Polygons polygons={filter.polygons} />\r\n    </StyledMapContainer>\r\n  );\r\n});\r\n","import React, { useContext, useEffect } from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport AppSlider from '../inputs/AppSlider';\r\nimport { AppContext } from '../AppContext';\r\nimport { operatorList, vehicleThreatList, distanceUnitList } from '../constants';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Typography } from '@mui/material';\r\n\r\nconst getLabelText = (value) => {\r\n  return vehicleThreatList[value];\r\n};\r\n\r\nexport default observer(({ label, filter }) => {\r\n  const { configuration } = useContext(AppContext);\r\n  const units = configuration.units;\r\n  const [range, setRange] = React.useState(null);\r\n  const setFilterValue = (range) => {\r\n    let value = null;\r\n    if (range !== '' && !Number.isNaN(range)) {\r\n      value = units === 1 /* Statute */ ? range * 0.3048 : range;\r\n    }\r\n\r\n    filter.setValue(value === null ? null : Math.round(value * 100000) / 100000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let newRange = null;\r\n    if (filter.value !== null || !Number.isNaN(filter.value)) {\r\n      newRange = units === 0 /* Metric */\r\n        ? filter.value\r\n        : filter.value * 3.2808;\r\n    }\r\n\r\n    setRange(newRange === null ? null : Math.round(newRange * 100) / 100);\r\n  }, [units, filter.value]);\r\n  return (\r\n  <Grid container spacing={3}>\r\n    <Grid item xs={12} sm={12}>\r\n      <Typography>\r\n        NOTE: It is recommended that Threat operator is set to avoid None (e.g. \"Greater than None\") as otherwise it will match\r\n        targets that are not displayed on the Garmin device.\r\n      </Typography>\r\n    </Grid>\r\n    <Grid item xs={12} sm={4}>\r\n      <AppSelect items={operatorList} label=\"Range operator\" setter={filter.setOperator} value={filter.operator} /> \r\n    </Grid>\r\n    {\r\n      filter.operator ?\r\n        <React.Fragment>\r\n          <Grid item xs={12} sm={5}>\r\n            <AppTextInput required label=\"Vehicle range\" type=\"number\" setter={setFilterValue} value={range} />\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <AppSelect items={distanceUnitList} label=\"Units\" value={units} />\r\n          </Grid>\r\n        </React.Fragment>\r\n      : <Grid item xs={12} sm={8}></Grid>\r\n    }\r\n\r\n    <Grid item xs={12} sm={4}>\r\n      <AppSelect items={operatorList} label=\"Threat operator\" setter={filter.setThreatOperator} value={filter.threatOperator} /> \r\n    </Grid>\r\n    {\r\n      filter.threatOperator ?\r\n        <Grid item xs={12} sm={8}>\r\n          <AppSlider\r\n            label=\"Vehicle threat\"\r\n            setter={filter.setThreat}\r\n            value={filter.threat}\r\n            getLabelText={getLabelText}\r\n            step={1}\r\n            min={0}\r\n            max={2}\r\n            defaultValue={0}\r\n          />\r\n        </Grid>\r\n      : <Grid item xs={12} sm={8}></Grid>\r\n    }\r\n  </Grid>\r\n  );\r\n});","import Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { setList } from '../constants';\r\n\r\nexport default observer(({ filter }) => {\r\n\r\n  const setValue = (value) => {\r\n    filter.setOperator('=');\r\n    filter.setValue(value);\r\n  };\r\n\r\n  return (\r\n  <Grid container spacing={3}>\r\n    <Grid item xs={12} sm={12}>\r\n      <Typography>\r\n      NOTE: Start location is set when the activity is started and the GPS location is acquired. This filter can be \r\n      used to detect whether the activity is indoor or not.\r\n      </Typography>\r\n    </Grid>\r\n    <Grid item xs={12} sm={4}>\r\n      <AppSelect required items={setList} label=\"Value\" setter={setValue} value={filter.value} /> \r\n    </Grid>\r\n  </Grid>\r\n  );\r\n});","import Grid from '@mui/material/Grid';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(({ filter }) => {\r\n\r\n  const setValue = (value) => {\r\n    filter.setOperator('=');\r\n    filter.setValue(value);\r\n  };\r\n\r\n  return (\r\n  <Grid container spacing={3}>\r\n    <Grid item xs={12} sm={4}>\r\n      <AppTextInput required label=\"Name\" setter={setValue} value={filter.value} /> \r\n    </Grid>\r\n  </Grid>\r\n  );\r\n});","import Grid from '@mui/material/Grid';\r\nimport { AppContext } from '../AppContext';\r\nimport LightModeSelection from '../components/LightModeSelection';\r\nimport { observer } from 'mobx-react-lite';\r\nimport LightsPaper from '../components/LightsPaper';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport { logicalOperators } from '../constants';\r\n\r\nexport default observer(({ filter }) => {\r\n\r\n  const headlightMode = filter.headlightMode;\r\n  const taillightMode = filter.taillightMode;\r\n  const bothSet = headlightMode.controlMode != null && taillightMode.controlMode != null;\r\n\r\n  return (\r\n    <AppContext.Consumer>\r\n      {(context) => (\r\n        <LightsPaper\r\n          configuration={context.configuration}\r\n          getHeadlightNode={(headlight) => (\r\n            <LightModeSelection\r\n              controlMode={headlightMode.controlMode} setControlMode={headlightMode.setControlMode}\r\n              lightMode={headlightMode.lightMode} setLightMode={headlightMode.setLightMode} lightModes={headlight.modes}\r\n              operator={headlightMode.operator} setOperator={headlightMode.setOperator} />\r\n          )}\r\n          getMiddleNode={(headlight, taillight) => (\r\n            headlight && taillight ?\r\n            <Grid container spacing={3} sx={{ marginBottom: 2 }}>\r\n              <Grid item xs={12} sm={4}>\r\n                <AppSelect required={bothSet} items={logicalOperators} label=\"Operator\" setter={filter.setOperator} value={filter.operator} />\r\n              </Grid>\r\n            </Grid>\r\n            : null\r\n          )}\r\n          getTaillightNode={(taillight) => (\r\n            <LightModeSelection\r\n              controlMode={taillightMode.controlMode} setControlMode={taillightMode.setControlMode}\r\n              lightMode={taillightMode.lightMode} setLightMode={taillightMode.setLightMode} lightModes={taillight.modes}\r\n              operator={taillightMode.operator} setOperator={taillightMode.setOperator} />\r\n          )}\r\n        />\r\n      )}\r\n    </AppContext.Consumer>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport Accordion from './Accordion';\r\nimport AccordionSummary from './AccordionSummary';\r\nimport AccordionDetails from './AccordionDetails';\r\nimport { observer } from 'mobx-react-lite';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport BatteryFilter from '../filters/BatteryFilter';\r\nimport NumberFilter from '../filters/NumberFilter';\r\nimport SpeedFilter from '../filters/SpeedFilter';\r\nimport GpsAccuracyFilter from '../filters/GpsAccuracyFilter';\r\nimport TimerStateFilter from '../filters/TimerStateFilter';\r\nimport TimespanFilter from '../filters/TimespanFilter';\r\nimport PositionFilter from '../filters/PositionFilter';\r\nimport BikeRadarFilter from '../filters/BikeRadarFilter';\r\nimport StartLocationFilter from '../filters/StartLocationFilter';\r\nimport ProfileNameFilter from '../filters/ProfileNameFilter';\r\nimport { AppContext } from '../AppContext';\r\nimport { action } from 'mobx';\r\nimport { arrayMoveUp, arrayMoveDown } from '../constants';\r\nimport { Typography } from '@mui/material';\r\nimport LightsModeFilter from '../filters/LightsModeFilter';\r\n\r\nexport default observer(({ filters, filterTypes, device }) => {\r\n  const removeFilter = action((filter) => {\r\n    filters.remove(filter);\r\n  });\r\n  const handleChange = (filter) => {\r\n    filter.setOpen(!filter.open);\r\n  };\r\n  const canMoveUpFilter = (filter) => {\r\n    return filters.indexOf(filter) > 0;\r\n  };\r\n  const moveUpFilter = action((filter) => {\r\n    arrayMoveUp(filters, filter);\r\n  });\r\n  const canMoveDownFilter = (filter) => {\r\n    return filters.indexOf(filter) < (filters.length - 1);\r\n  };\r\n  const moveDownFilter = action((filter) => {\r\n    arrayMoveDown(filters, filter);\r\n  });\r\n\r\n  return filters.map(filter => (\r\n    <Accordion key={filter.id}\r\n      TransitionProps={{ unmountOnExit: true }}\r\n      expanded={filter.open}\r\n      onChange={() => handleChange(filter)}>\r\n      <AppContext.Consumer>\r\n        {(context) => (\r\n          <AccordionSummary\r\n            item={filter}\r\n            param1={context.configuration}\r\n            removeLabel=\"Remove filter\"\r\n            removeCallback={removeFilter}\r\n            validationParameter={device}\r\n            canMoveUpCallback={canMoveUpFilter}\r\n            moveUpCallback={moveUpFilter}\r\n            canMoveDownCallback={canMoveDownFilter}\r\n            moveDownCallback={moveDownFilter}\r\n          />\r\n        )}\r\n      </AppContext.Consumer>\r\n      <AccordionDetails>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={12}>\r\n            <AppSelect items={filterTypes} required label=\"Type\" setter={filter.setType} value={filter.type} />\r\n          </Grid>\r\n          <Grid item xs={12} sm={12}>\r\n            {\r\n              filter.type === 'E' ? <TimespanFilter filter={filter} />\r\n              : filter.type === 'F' ? <PositionFilter filter={filter} />\r\n              : filter.type === 'B' ? <BatteryFilter filter={filter} />\r\n              : filter.type === 'A' ? <NumberFilter\r\n                                        label=\"% per second\"\r\n                                        filter={filter}\r\n                                        note={\r\n                                          <Typography>\r\n                                          NOTE: Acceleration is calculated once per second by calculating the difference between the current and previous (one second ago) speed\r\n                                          in percentage (%). When decelerating, the calculated value will be negative, which means that this filter can be also used for braking\r\n                                          by setting a negative value (e.g. Lower than -20%).\r\n                                          </Typography>\r\n                                        }\r\n                                      />\r\n              : filter.type === 'C' ? <SpeedFilter filter={filter} />\r\n              : filter.type === 'G' ? <GpsAccuracyFilter filter={filter} />\r\n              : filter.type === 'H' ? <TimerStateFilter filter={filter} />\r\n              : filter.type === 'I' ? <BikeRadarFilter filter={filter} />\r\n              : filter.type === 'J' ? <StartLocationFilter filter={filter} />\r\n              : filter.type === 'K' ? <ProfileNameFilter filter={filter} />\r\n              : filter.type === 'L' ? <NumberFilter\r\n                                        label=\"Gradient %\"\r\n                                        filter={filter}\r\n                                        note={\r\n                                          <Typography>\r\n                                          NOTE: Works only when an activity is running. The value will be negative when cycling downhill and positive when cycling uphill.\r\n                                          </Typography>\r\n                                        }\r\n                                      />\r\n              : filter.type === 'M' ? <NumberFilter\r\n                                      label=\"Solar intensity\"\r\n                                      filter={filter}\r\n                                      note={\r\n                                        <Typography>\r\n                                        NOTE: Works only for solar models. Value from 0-100 describes the solar sensor's charge efficiency. When the device is not charging by using solar sensor\r\n                                        (e.g. device too hot/cold or full battery), the value will be negative.\r\n                                        </Typography>\r\n                                      }\r\n                                    />\r\n              : filter.type === 'N' ? <LightsModeFilter filter={filter} />\r\n              : null\r\n            }\r\n          </Grid>\r\n        </Grid>\r\n      </AccordionDetails>\r\n    </Accordion>\r\n  ));\r\n});\r\n","import React from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport { observer } from 'mobx-react-lite';\r\nimport Typography from '@mui/material/Typography';\r\nimport ElementWithHelp from './ElementWithHelp';\r\nimport AppCheckbox from '../inputs/AppCheckbox';\r\n\r\nexport default observer(({ device, configuration, }) => {\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        device?.highMemory ?\r\n          <Grid container spacing={2} justifyContent=\"center\">\r\n            <Grid item xs={12} sm={12}>\r\n              <ElementWithHelp\r\n                element={\r\n                  <AppCheckbox label=\"Use Individual Light Network\" value={configuration.useIndividualNetwork} setter={configuration.setUseIndividualNetwork} />\r\n                }\r\n                help={\r\n                  <React.Fragment>\r\n                    <Typography gutterBottom>\r\n                      Individal Light Network is an alternative light network implementation for connecting and controlling ANT+ lights. In comparison\r\n                      to the Garmin built-in light network, this network does not form a light network when two lights are connected, but instead it\r\n                      establish a separate connection for every light. This mode needs to be used for lights that have issues with the built-in\r\n                      light network (See.Sense and Cycliq lights).\r\n                </Typography>\r\n                    <Typography gutterBottom>\r\n                      <strong>NOTE: Lights in Garmin Sensors menu need to be disabled or removed in order to use this feature!</strong>\r\n                    </Typography>\r\n                    <Typography>\r\n                      Known limitations:\r\n                </Typography>\r\n                    <ul>\r\n                      <li><Typography>It requires to manually set the device numbers for the lights</Typography></li>\r\n                      <li><Typography>It will not turn off the lights when the device goes to sleep</Typography></li>\r\n                      <li><Typography>It uses one ANT channel per light</Typography></li>\r\n                    </ul>\r\n                  </React.Fragment>\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          : null\r\n      }\r\n    </React.Fragment>\r\n  );\r\n});\r\n","import React, { useRef } from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\nimport { observer } from 'mobx-react-lite';\r\nimport Paper from '@mui/material/Paper';\r\nimport Grid from '@mui/material/Grid';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport RemoveIcon from '@mui/icons-material/Remove';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport LightButtonGroup from '../models/LightButtonGroup';\r\n\r\nconst Root = styled('div')(({ theme }) => ({\r\n  flexGrow: 1,\r\n  cursor: 'move',\r\n  marginTop: theme.spacing(1)\r\n}));\r\n\r\nexport default observer(({ buttonGroup, lightModes, index, moveGroup, addButton, removeButton }) => {\r\n  const ref = useRef(null);\r\n  const [{ handlerId }, drop] = useDrop({\r\n    accept: 'ButtonGroup',\r\n    collect(monitor) {\r\n      return {\r\n        handlerId: monitor.getHandlerId(),\r\n      }\r\n    },\r\n    hover(item, monitor) {\r\n      if (!ref.current) {\r\n        return\r\n      }\r\n\r\n      const dragIndex = item.index\r\n      const hoverIndex = index\r\n\r\n      // Don't replace items with themselves\r\n      if (dragIndex === hoverIndex) {\r\n        return\r\n      }\r\n\r\n      // Determine rectangle on screen\r\n      const hoverBoundingRect = ref.current?.getBoundingClientRect()\r\n\r\n      // Get vertical middle\r\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\r\n\r\n      // Determine mouse position\r\n      const clientOffset = monitor.getClientOffset()\r\n\r\n      // Get pixels to the top\r\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top\r\n\r\n      // Only perform the move when the mouse has crossed half of the items height\r\n      // When dragging downwards, only move when the cursor is below 50%\r\n      // When dragging upwards, only move when the cursor is above 50%\r\n\r\n      // Dragging downwards\r\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n        return\r\n      }\r\n\r\n      // Dragging upwards\r\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n        return\r\n      }\r\n\r\n      // Time to actually perform the action\r\n      moveGroup(dragIndex, hoverIndex)\r\n\r\n      // Note: we're mutating the monitor item here!\r\n      // Generally it's better to avoid mutations,\r\n      // but it's good here for the sake of performance\r\n      // to avoid expensive index searches.\r\n      item.index = hoverIndex\r\n    },\r\n  });\r\n\r\n  var isGroup = buttonGroup instanceof LightButtonGroup;\r\n  const [{ isDragging }, drag] = useDrag({\r\n    type: 'ButtonGroup',\r\n    item: () => ({ id: buttonGroup.id, index }),\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  const getButtonTemplate = (button) => {\r\n    return (\r\n      <Grid item xs key={button.id}>\r\n        <Paper sx={{ padding: 2 }}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} sm={12}>\r\n              <AppSelect required items={lightModes} label=\"Light mode\" setter={button.setMode} value={button.mode} />\r\n            </Grid>\r\n            <Grid item xs={12} sm={12}>\r\n              { button.mode >= 0\r\n              ? <AppTextInput required label=\"Button name\" value={button.name} setter={button.setName} />\r\n              : button.mode === -2 ? <AppTextInput label=\"Button name\" value=\"Configuration name\" />\r\n              : <AppTextInput label=\"Button name\" value=\"Smart / Manual / Network\" />\r\n              }\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Grid>);\r\n  };\r\n\r\n  const opacity = isDragging ? 0 : 1;\r\n  drag(drop(ref));\r\n  return (\r\n    <Root ref={ref} style={{ ...opacity }} data-handler-id={handlerId}>\r\n      <Grid container spacing={1}>\r\n        { isGroup\r\n          ? buttonGroup.buttons.map((button, index) => getButtonTemplate(button))\r\n          : getButtonTemplate(buttonGroup)\r\n        }\r\n        <Grid item xs={1}\r\n          sx={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center'\r\n          }}>\r\n          {\r\n            isGroup\r\n            ? (\r\n              <Grid container spacing={1}>\r\n                <Grid item xs={12} sm={12}>\r\n                  <IconButton\r\n                    edge=\"end\"\r\n                    aria-label=\"add\"\r\n                    disabled={buttonGroup.buttons.length > 1}\r\n                    onClick={() => addButton(buttonGroup)}\r\n                    size=\"large\">\r\n                    <AddIcon />\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid item xs={12} sm={12}>\r\n                  <IconButton\r\n                    edge=\"end\"\r\n                    aria-label=\"remove\"\r\n                    onClick={() => removeButton(buttonGroup)}\r\n                    size=\"large\">\r\n                    <RemoveIcon />\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            )\r\n            : (\r\n              <Grid container spacing={1}>\r\n                <Grid item xs={12} sm={12}>\r\n                  <IconButton\r\n                    aria-label=\"remove\"\r\n                    onClick={() => removeButton(buttonGroup)}\r\n                    size=\"large\">\r\n                    <RemoveIcon />\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            )\r\n          }\r\n        </Grid>\r\n      </Grid>\r\n    </Root>\r\n  );\r\n});\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport { action } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\nimport LightButtonGroup from '../models/LightButtonGroup';\r\nimport LightButton from '../models/LightButton';\r\nimport ButtonGroup from './ButtonGroup';\r\nimport AddButton from './AddButton';\r\nimport { createMenuItemColorTemplateFunc } from './Templates';\r\nimport { controlMode, currentConfiguration, getButtonColors, getButtonTextColors, groupNameVisibility } from '../constants';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport AppSelect from '../inputs/AppSelect';\r\n\r\nconst getModes = (lightModes) => {\r\n  return [controlMode, currentConfiguration].concat(lightModes);\r\n};\r\nconst buttonColorTemplate = createMenuItemColorTemplateFunc();\r\nconst buttonTextColorTemplate = createMenuItemColorTemplateFunc(true);\r\n\r\nexport default observer(({ lightPanel, lightModes }) => {\r\n  const [modes, setModes] = React.useState(getModes(lightModes));\r\n  const addButtonGroup = action(() => {\r\n    const group = new LightButtonGroup();\r\n    group.buttons.push(new LightButton());\r\n    lightPanel.buttonGroups.push(group);\r\n  });\r\n  const moveGroup = action(useCallback((dragIndex, hoverIndex) => {\r\n      const dragGroup = lightPanel.buttonGroups[dragIndex]\r\n      lightPanel.buttonGroups.splice(dragIndex, 1);\r\n      lightPanel.buttonGroups.splice(hoverIndex, 0, dragGroup);\r\n    },\r\n    [lightPanel.buttonGroups],\r\n  ));\r\n  const addButton = action((group) => {\r\n    group.buttons.push(new LightButton());\r\n  });\r\n  const removeButton = action((group) => {\r\n    group.buttons.remove(group.buttons[group.buttons.length - 1]);\r\n    if (!group.buttons.length) {\r\n      lightPanel.buttonGroups.remove(group);\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    setModes(getModes(lightModes));\r\n  }, [lightModes]);\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} sm={4}>\r\n          <AppTextInput label=\"Short light name\" setter={lightPanel.setLightName} value={lightPanel.lightName} />\r\n        </Grid>\r\n        <Grid item xs={12} sm={4}>\r\n          <AppSelect required items={getButtonColors()} label=\"Active button backgound color\" setter={lightPanel.setButtonColor} value={lightPanel.buttonColor} itemTemplateFunc={buttonColorTemplate} />\r\n        </Grid>\r\n        <Grid item xs={12} sm={4}>\r\n          <AppSelect required items={getButtonTextColors()} label=\"Active button text color\" setter={lightPanel.setButtonTextColor} value={lightPanel.buttonTextColor} itemTemplateFunc={buttonTextColorTemplate} />\r\n        </Grid>\r\n        <Grid item xs={12} sm={4}>\r\n          <AppSelect required items={groupNameVisibility} label=\"Group name visiblity\" setter={lightPanel.setGroupNameVisibility} value={lightPanel.groupNameVisibility} />\r\n        </Grid>\r\n      </Grid>\r\n      <div>\r\n        {lightPanel.buttonGroups.map((group, index) => (\r\n          <ButtonGroup\r\n            key={group.id}\r\n            buttonGroup={group}\r\n            lightModes={modes}\r\n            index={index}\r\n            moveGroup={moveGroup}\r\n            addButton={addButton}\r\n            removeButton={removeButton}\r\n          />\r\n        ))}\r\n      </div>\r\n      <AddButton onClick={() => addButtonGroup()}>\r\n        Add Button Group\r\n      </AddButton>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useCallback } from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport { action } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\nimport LightButton from '../models/LightButton';\r\nimport ButtonGroup from './ButtonGroup';\r\nimport AddButton from './AddButton';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\n\r\nexport default observer(({ lightSettings, lightModes, }) => {\r\n  const moveButton = action(useCallback((dragIndex, hoverIndex) => {\r\n      const dragButton = lightSettings.buttons[dragIndex]\r\n      lightSettings.buttons.splice(dragIndex, 1);\r\n      lightSettings.buttons.splice(hoverIndex, 0, dragButton);\r\n    },\r\n    [lightSettings.buttons],\r\n  ));\r\n  const addButton = action(() => {\r\n    lightSettings.buttons.push(new LightButton());\r\n  });\r\n  const removeButton = action((button) => {\r\n    lightSettings.buttons.remove(button);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={6} sm={4}>\r\n          <AppTextInput label=\"Short light name\" setter={lightSettings.setLightName} value={lightSettings.lightName} />\r\n        </Grid>\r\n      </Grid>\r\n      <div>\r\n        {lightSettings.buttons.map((button, index) => (\r\n          <ButtonGroup\r\n            key={button.id}\r\n            buttonGroup={button}\r\n            lightModes={lightModes}\r\n            index={index}\r\n            moveGroup={moveButton}\r\n            addButton={addButton}\r\n            removeButton={removeButton}\r\n          />\r\n        ))}\r\n      </div>\r\n      <AddButton onClick={() => addButton()}>\r\n        Add Button\r\n      </AddButton>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useEffect } from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport Typography from '@mui/material/Typography';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport Grid from '@mui/material/Grid';\r\nimport { observer } from 'mobx-react-lite';\r\nimport FilterGroups from './FilterGroups';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport AppCheckbox from '../inputs/AppCheckbox';\r\nimport ElementWithHelp from './ElementWithHelp';\r\nimport LightPanel from './LightPanel';\r\nimport { createMenuItemColorTemplateFunc } from './Templates';\r\nimport LightIconTapBehavior from './LightIconTapBehavior';\r\nimport LightSettings from './LightSettings';\r\nimport LightPanelModel from '../models/LightPanel';\r\nimport LightSettingsModel from '../models/LightSettings';\r\nimport LightModeCycleBehavior from '../models/LightModeCycleBehavior';\r\nimport { getLightIconColors } from '../constants';\r\n\r\nconst PREFIX = 'LightConfiguration';\r\n\r\nconst classes = {\r\n  sectionTitle: `${PREFIX}-sectionTitle`\r\n};\r\n\r\nconst StyledCard = styled(Card)(({ theme }) => ({\r\n  [`& .${classes.sectionTitle}`]: {\r\n    marginTop: theme.spacing(3),\r\n    marginBottom: theme.spacing(1),\r\n  }\r\n}));\r\n\r\nconst getLightData = (value, lights) => {\r\n  return value !== null ? lights.find(l => l.id === value) : null;\r\n};\r\n\r\nconst getDefaultPanel = (value, lights) => {\r\n  return value !== null ? lights.find(l => l.id === value)?.defaultLightPanel : null;\r\n};\r\nconst itemTemplate = createMenuItemColorTemplateFunc();\r\n\r\nexport default observer(({\r\n  device, totalLights, useIndividualNetwork, globalFilterGroups, lightType, lightList, lightFilterGroups, setLight, light,\r\n  setLightModes, setAdditionalLightModes, setDefaultMode, defaultMode, lightPanel, setLightPanel, lightSettings, setLightSettings, deviceNumber, setDeviceNumber,\r\n  serialNumber, setSerialNumber, forceSmartMode, setForceSmartMode, lightIconTapBehavior, setLightIconTapBehavior, lightIconColor, setLightIconColor }) => {\r\n  const [lightData, setLightData] = React.useState(getLightData(light, lightList));\r\n  const setValue = (value) => {\r\n    setLight(value);\r\n    const data = getLightData(value, lightList);\r\n    setLightModes(data !== null ? data.lightModes : null);\r\n    setAdditionalLightModes(data !== null ? data.additionalLightModes : null);\r\n  };\r\n  var hasFilters = !!setDefaultMode;\r\n\r\n  useEffect(() => {\r\n    setLightData(getLightData(light, lightList));\r\n    if (light == null) {\r\n      setLightPanel(null);\r\n    } else if (lightPanel == null) {\r\n      setLightPanel(new LightPanelModel(getDefaultPanel(light, lightList)));\r\n    }\r\n  }, [light, lightList, setLightPanel, lightPanel]);\r\n\r\n  useEffect(() => {\r\n    if (lightIconTapBehavior == null && setLightIconTapBehavior != null) {\r\n      setLightIconTapBehavior(new LightModeCycleBehavior());\r\n    }\r\n  }, [lightIconTapBehavior, setLightIconTapBehavior]);\r\n\r\n  useEffect(() => {\r\n    if (light == null) {\r\n      setLightSettings(null);\r\n    } else if (lightSettings == null) {\r\n      setLightSettings(new LightSettingsModel(getDefaultPanel(light, lightList)));\r\n    }\r\n  }, [light, lightList, lightSettings, setLightSettings]);\r\n\r\n  return (\r\n    <StyledCard>\r\n      <CardHeader\r\n        title={lightType + ' Configuration'}\r\n        titleTypographyProps={{ align: 'center' }}\r\n      />\r\n      <CardContent>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={4}>\r\n            <AppSelect items={lightList} label={lightType} setter={setValue} value={light} />\r\n          </Grid>\r\n          {\r\n            lightData && hasFilters\r\n            ?\r\n            <Grid item xs={12} sm={4}>\r\n              <AppSelect\r\n                  required={globalFilterGroups.length || lightFilterGroups.length ? true : false}\r\n                  items={lightData.modes}\r\n                  label=\"Default mode\"\r\n                  setter={setDefaultMode}\r\n                  value={defaultMode}\r\n                  help={\r\n                    <React.Fragment>\r\n                      <Typography>\r\n                        The default mode is used only by the Smart control mode as a fallback light mode, when none of the below filter groups\r\n                        is matched.\r\n                      </Typography>\r\n                    </React.Fragment>\r\n                  }\r\n                />\r\n            </Grid>\r\n            : null\r\n          }\r\n          {\r\n            !light\r\n            ? null\r\n            : useIndividualNetwork && device?.highMemory\r\n            ?\r\n            <Grid item xs={12} sm={4}>\r\n              <AppTextInput label=\"Device number\"\r\n                setter={setDeviceNumber}\r\n                required={(device == null || !device.nativePairing)}\r\n                value={deviceNumber}\r\n                help={\r\n                  <React.Fragment>\r\n                    <Typography>\r\n                      The light device number is a unique number that is required by the Individual Light Network.\r\n                      If your device is a System 8 device, you can pair the lights using the native Sensor menu and leave this field empty.\r\n                      For non-System 8 devices, you can obtain the device number by following these steps:\r\n                    </Typography>\r\n                    <ol>\r\n                      <li><Typography>Put the ANT+ light near the Garmin device</Typography></li>\r\n                      <li><Typography>Open the Garmin menu and go to Sensors -&gt; Add Sensor -&gt; Light</Typography></li>\r\n                      <li><Typography>The light with its device number (ID) should be displayed on the list</Typography></li>\r\n                    </ol>\r\n                    <img src=\"./DeviceNumber.png\" alt=\"Example\" />\r\n                  </React.Fragment>\r\n                }\r\n              />\r\n            </Grid>\r\n            :\r\n            <Grid item xs={12} sm={4}>\r\n              <AppTextInput label=\"Serial number\" type=\"number\"\r\n                setter={setSerialNumber}\r\n                value={serialNumber}\r\n                help={\r\n                  <React.Fragment>\r\n                    <Typography>\r\n                      The light serial number which required only when multiple lights of the same type are paired (e.g. two headlights). To obtain the serial number:\r\n                    </Typography>\r\n                    <ol>\r\n                      <li><Typography>Open the Garmin menu and go to Sensors -&gt; Lights</Typography></li>\r\n                      <li><Typography>Select the desired light from the list and open About</Typography></li>\r\n                      <li><Typography>The serial should be displayed with the label <b>Serial #</b></Typography></li>\r\n                    </ol>\r\n                  </React.Fragment>\r\n                }\r\n              />\r\n            </Grid>\r\n          }\r\n          {\r\n            light\r\n            ?\r\n            <Grid item xs={12} sm={4}>\r\n              <AppSelect required items={getLightIconColors(device)} label=\"Icon color\" setter={setLightIconColor} value={lightIconColor} itemTemplateFunc={itemTemplate} />\r\n            </Grid>\r\n            : null\r\n          }\r\n          {\r\n            setForceSmartMode && light && device?.highMemory\r\n              ?\r\n              <Grid item xs={12} sm={4}>\r\n                <ElementWithHelp\r\n                  element={\r\n                    <AppCheckbox label=\"Force Smart mode\" value={forceSmartMode} setter={setForceSmartMode} />\r\n                  }\r\n                  help={\r\n                    <Typography>\r\n                      Force Smart mode will prevent external light mode changes (e.g. pressing the button on the light) to switch from Smart\r\n                      to Manual control mode. This setting works only when the light is in Smart control mode.\r\n                    </Typography>\r\n                  }\r\n                />\r\n              </Grid>\r\n              : null\r\n          }\r\n        </Grid>\r\n        {\r\n          lightData && hasFilters\r\n          ? <React.Fragment>\r\n              <ElementWithHelp\r\n                sx={{marginBottom: 1, marginTop: 1}}\r\n                element={<Typography variant=\"h5\">Filter groups</Typography>}\r\n                help={\r\n                  <Typography>\r\n                    Filter groups contains a group of filters, which are used by the Smart control mode to determine the light mode. Every filter group defines\r\n                    a light mode, which will be used when every filter inside the group is matched. The order of filter groups is important\r\n                    as in case multiple filter groups are matched, only the light mode of the topmost matched group will be used.\r\n                  </Typography>\r\n                }\r\n              />\r\n              <FilterGroups filterGroups={lightFilterGroups} lightData={lightData} device={device} totalLights={totalLights} />\r\n          </React.Fragment>\r\n          : null\r\n        }\r\n        {\r\n          lightData && lightIconTapBehavior && device?.touchScreen\r\n          ? <React.Fragment>\r\n              <ElementWithHelp\r\n                className={classes.sectionTitle}\r\n                element={<Typography variant=\"h5\">Light icon tap behavior</Typography>}\r\n                help={\r\n                  <Typography>\r\n                    Configure which control modes and light modes (for Manual mode) can be selected by tapping on the light icon.\r\n                  </Typography>\r\n                }\r\n              />\r\n              <LightIconTapBehavior lightIconTapBehavior={lightIconTapBehavior} lightModes={lightData.modes} />\r\n          </React.Fragment>\r\n          : null\r\n        }\r\n        {\r\n          lightData && lightPanel && device?.touchScreen\r\n          ? <React.Fragment>\r\n              <ElementWithHelp\r\n                className={classes.sectionTitle}\r\n                element={<Typography variant=\"h5\">Light panel</Typography>}\r\n                help={\r\n                  <Typography>\r\n                    The Light panel will be displayed only when putting the data field on a \"1 Field Layout\" data screen on your device. Here you can\r\n                    modify how the light panel will look like on the screen by renaming buttons, order them in a different way, remove those that won't be\r\n                    used, change to two buttons per row and change the short light name that will be displayed at the bottom of the screen.\r\n                  </Typography>\r\n                }\r\n              />\r\n            <LightPanel lightPanel={lightPanel} lightModes={lightData.modes} />\r\n          </React.Fragment>\r\n          : null\r\n        }\r\n        {\r\n          lightData && lightSettings && device?.settings\r\n          ? <React.Fragment>\r\n              <ElementWithHelp\r\n                className={classes.sectionTitle}\r\n                element={<Typography variant=\"h5\">Light settings</Typography>}\r\n                help={\r\n                  <Typography>\r\n                    The Light settings will be displayed when opening the data field settings on your device. Here you can modify how the menu for light\r\n                    modes will be displayed by renaming items, order them in a different way, remove those that won't be used and change the short light name\r\n                    that will be displayed in the menu.\r\n                  </Typography>\r\n                }\r\n              />\r\n\r\n            <LightSettings lightSettings={lightSettings} lightModes={lightData.modes} />\r\n          </React.Fragment>\r\n          : null\r\n        }\r\n      </CardContent>\r\n    </StyledCard>\r\n  );\r\n});\r\n","import React, { useEffect } from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { controlModeList, manualModeBehaviorList } from '../constants';\r\nimport AppSelect from '../inputs/AppSelect';\r\n\r\nexport default observer(({ lightIconTapBehavior, lightModes }) => {\r\n  useEffect(() => {\r\n    if (lightIconTapBehavior.lightModes) {\r\n      lightIconTapBehavior.setLightModes(lightIconTapBehavior.lightModes.filter(m => lightModes.find(lm => lm.id === m) !== undefined));\r\n    }\r\n  }, [lightIconTapBehavior, lightModes]);\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} sm={4}>\r\n          <AppSelect items={controlModeList} label=\"Control modes\" setter={lightIconTapBehavior.setControlModes} value={lightIconTapBehavior.controlModes} multiple={true} />\r\n        </Grid>\r\n        {\r\n          lightIconTapBehavior.containsManualMode()\r\n          ?\r\n          <Grid item xs={12} sm={4}>\r\n            <AppSelect required items={manualModeBehaviorList} label=\"Manual mode behavior\" setter={lightIconTapBehavior.setManualModeBehavior} value={lightIconTapBehavior.manualModeBehavior} />\r\n          </Grid>\r\n          : null\r\n        }\r\n        {\r\n          lightIconTapBehavior.containsManualMode() && lightIconTapBehavior.manualModeBehavior === 1\r\n          ?\r\n          <Grid item xs={12} sm={4}>\r\n            <AppSelect required items={lightModes} label=\"Light modes\" setter={lightIconTapBehavior.setLightModes} value={lightIconTapBehavior.lightModes} multiple={true} />\r\n          </Grid>\r\n          : null\r\n        }\r\n      </Grid>\r\n    </div>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { controlModeList } from '../constants';\r\nimport AppSelect from '../inputs/AppSelect';\r\n\r\nconst operators = [\r\n  { id: '=', name: 'Equal' },\r\n  { id: '!', name: 'Not Equal' }\r\n];\r\n\r\nexport default observer(({ controlMode, setControlMode, lightMode, setLightMode, lightModes, setOperator, operator }) => {\r\n\r\n  const hasOperator = setOperator != null;\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      {\r\n        hasOperator ?\r\n        <Grid item xs={12} sm={hasOperator ? 4 : 6}>\r\n          <AppSelect required={controlMode != null} items={operators} label=\"Operator\" setter={setOperator} value={operator} />\r\n        </Grid>\r\n        : null\r\n      }\r\n      <Grid item xs={12} sm={hasOperator ? 4 : 6}>\r\n        <AppSelect items={controlModeList} label=\"Control modes\" setter={setControlMode} value={controlMode} />\r\n      </Grid>\r\n      {\r\n        controlMode === 2 /* MANUAL */\r\n        ?\r\n        <Grid item xs={12} sm={hasOperator ? 4 : 6}>\r\n          <AppSelect required items={lightModes} label=\"Light mode\" setter={setLightMode} value={lightMode} />\r\n        </Grid>\r\n        : null\r\n      }\r\n    </Grid>\r\n  );\r\n});\r\n","import Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport Typography from '@mui/material/Typography';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { getLight } from '../constants';\r\n\r\nexport default observer(({ configuration, getHeadlightNode, getTaillightNode, getMiddleNode }) => {\r\n\r\n  const headlightId = configuration.headlight;\r\n  const taillightId = configuration.taillight;\r\n  const headlight = headlightId ? getLight(false, headlightId) : null;\r\n  const taillight = taillightId ? getLight(true, taillightId) : null;\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        headlight ?\r\n          <Paper sx={{ padding: 2, marginBottom: 1 }}>\r\n            <Grid container spacing={3} sx={{ marginBottom: 2 }}>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h5\">{headlight.name}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n            {getHeadlightNode(headlight)}\r\n          </Paper>\r\n          : null\r\n      }\r\n      {\r\n        getMiddleNode != null ? getMiddleNode(headlight, taillight) : null\r\n      }\r\n      {\r\n        taillight ?\r\n          <Paper sx={{ padding: 2, marginBottom: 1 }}>\r\n            <Grid container spacing={3} sx={{ marginBottom: 2 }}>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h5\">{taillight.name}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n            {getTaillightNode(taillight)}\r\n          </Paper>\r\n          : null\r\n      }\r\n    </div>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport Alert from '@mui/material/Alert';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport Configuration from '../models/Configuration';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(({ setConfiguration, deviceList }) => {\r\n  const [state, setState] = React.useState({\r\n    existingConfigurationValue: null,\r\n    parseError: false\r\n  });\r\n  const setExistingConfigurationValue = (value) => {\r\n    setState({ ...state, existingConfigurationValue: value });\r\n  };\r\n  const parse = (value) => {\r\n    let newConfiguration = null;\r\n    try {\r\n      newConfiguration = Configuration.parse(value, deviceList);\r\n      if (!!newConfiguration) {\r\n        setConfiguration(newConfiguration);\r\n      }\r\n    }\r\n    catch {}\r\n    finally {\r\n      setState({\r\n        existingConfigurationValue: null,\r\n        parseError: !newConfiguration\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={2} sx={{ marginBottom: 4 }} justifyContent=\"center\">\r\n      <Grid item xs={8} sm={10}>\r\n        <AppTextInput label=\"Existing configuration\" value={state.existingConfigurationValue} setter={setExistingConfigurationValue} allowAllCharacters={true} />\r\n      </Grid>\r\n      <Grid item xs={4} sm={2}\r\n        sx={{\r\n          marginBottom: 'auto',\r\n          marginTop: 'auto'\r\n        }}>\r\n        <Button sx={{ width: '100%' }} variant=\"contained\" onClick={() => {parse(state.existingConfigurationValue, deviceList)}}>Load</Button>\r\n      </Grid>\r\n      { state.parseError ?\r\n        <Grid item xs={12} sm={12}>\r\n          <Alert severity=\"error\">Invalid configuration.</Alert>\r\n        </Grid>\r\n        : null\r\n      }\r\n    </Grid>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nconst Icon = styled('div')(() => ({\r\n  width: '24px',\r\n  height: '24px',\r\n  backgroundImage: 'none',\r\n  display: 'inline-flex',\r\n  verticalAlign: 'bottom',\r\n  boxShadow: '0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08)',\r\n  borderWidth: 0,\r\n  borderRadius: 4,\r\n  padding: 0\r\n}));\r\n\r\nconst IconComponent = ({ color, ...props }) => {\r\n  const hexColor = '#' + color.toString(16).padStart(6, '0');\r\n  return (\r\n    <Icon\r\n      variant=\"contained\"\r\n      style={{backgroundColor:hexColor}}\r\n      {...props}\r\n     />);\r\n};\r\n\r\nexport default IconComponent;\r\n","import ColorIcon from \"./ColorIcon\";\r\n\r\nexport function createMenuItemColorTemplateFunc(iconForAll) {\r\n\r\n  const menuItemColorTemplateFunc = (item) => {\r\n    if (item.id <= 1 && !iconForAll) {\r\n      return item.name;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <ColorIcon color={item.id} /> <span>{item.name}</span>\r\n      </div>);\r\n  };\r\n\r\n  return menuItemColorTemplateFunc;\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\nexport default observer(({ label, value, setter }) => {\r\n  return (\r\n    <FormControlLabel\r\n      sx={{ marginRight: 0 }}\r\n      control={<Checkbox checked={value} onChange={(e) => setter(e.target.checked)} />}\r\n      label={label}\r\n    />\r\n  );\r\n});","import React from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport HelpIcon from '@mui/icons-material/Help';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Popper from '@mui/material/Popper';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(({ content, ...props }) => {\r\n  const id = nanoid();\r\n  // Help icon constants\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(anchorEl ? null : event.currentTarget);\r\n  };\r\n  const open = Boolean(anchorEl);\r\n  const popperId = open ? `help-${id}` : undefined;\r\n\r\n  return (\r\n    <InputAdornment position=\"end\" {...props}>\r\n      <IconButton onClick={handleClick} size=\"large\">\r\n        <HelpIcon color=\"primary\" />\r\n        <Popper placement=\"bottom\" id={popperId} open={open} anchorEl={anchorEl}>\r\n          <Card\r\n            sx={{\r\n              maxWidth: 600,\r\n              overflow: 'auto'\r\n            }}>\r\n            <CardContent>\r\n              {content}\r\n            </CardContent>\r\n          </Card>\r\n        </Popper>\r\n      </IconButton>\r\n    </InputAdornment>\r\n  );\r\n});","import { useEffect } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport TextField from '@mui/material/TextField';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Close from \"@mui/icons-material/Close\";\r\nimport React from 'react';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { observer } from \"mobx-react-lite\";\r\nimport AppInputHelp from './AppInputHelp';\r\n\r\nexport default observer(({ items, label, value, setter, required, help, multiple, itemTemplateFunc, disabled }) => {\r\n  const id = nanoid();\r\n  const defaultValue = multiple ? [] : '';\r\n  const isDefault = (val) => multiple ? Array.isArray(val) && !val.length : val === '';\r\n  const handleChange = (event) => {\r\n    const newValue = event.target.value;\r\n    if (multiple) {\r\n      setter(newValue);\r\n    } else {\r\n      setter(!items.find(i => i.id === newValue) ? null : newValue);\r\n    }\r\n  };\r\n  const renderNames = (ids) => {\r\n    if (!ids)  {\r\n      return '';\r\n    }\r\n\r\n    return ids.map(id => items.find(i => i.id === id)?.name).join(', ')\r\n  };\r\n\r\n  let resetValue = value != null && (!multiple && !items.find(i => i.id === value));\r\n  useEffect(\r\n    () => {\r\n      if (resetValue) {\r\n        setter(null);\r\n      }\r\n\r\n      if (value === null || multiple || value === '') {\r\n        return;\r\n      }\r\n\r\n      if (!items.find(i => i.id === value)) {\r\n        setter(null);\r\n      }\r\n    },\r\n    [items, value, setter, multiple, resetValue]\r\n  );\r\n\r\n  if (value === null || resetValue) {\r\n    value = defaultValue;\r\n  }\r\n\r\n  return (\r\n    <TextField\r\n      sx={{\r\n        width: '100%'\r\n      }}\r\n      id={id}\r\n      select\r\n      required={required}\r\n      error={ required && isDefault(value) ? true : false}\r\n      label={label}\r\n      value={value}\r\n      onChange={handleChange}\r\n      SelectProps={{\r\n        multiple: multiple,\r\n        renderValue: multiple ? renderNames : undefined\r\n      }}\r\n      variant=\"standard\"\r\n      InputProps={{\r\n        readOnly: !setter,\r\n        disabled: disabled,\r\n        endAdornment: (\r\n          setter && !required && !disabled && !isDefault(value) ?\r\n          <React.Fragment>\r\n            <IconButton\r\n              style={{ marginRight: \"1em\", padding: '0' }}\r\n              onClick={() => setter(null)}\r\n              size=\"large\">\r\n              <Close />\r\n            </IconButton>\r\n          </React.Fragment>\r\n          : help ? <AppInputHelp content={help} style={{ marginRight: \"1em\", padding: '0' }} />\r\n          : null\r\n        )\r\n      }}\r\n    >\r\n      {items.map((item) => (\r\n        <MenuItem key={item.id} value={item.id}>{itemTemplateFunc ? itemTemplateFunc(item) : item.name}</MenuItem>\r\n      ))}\r\n    </TextField>\r\n  );\r\n});\r\n","import { nanoid } from 'nanoid';\r\nimport TextField from '@mui/material/TextField';\r\nimport { observer } from 'mobx-react-lite';\r\nimport AppInputHelp from './AppInputHelp';\r\n\r\nconst removeInvalidCharacters = (value) => {\r\n  if (!value){\r\n    return value;\r\n  }\r\n\r\n  return value.replace(/[:|#]/g, '');\r\n};\r\n\r\nexport default observer(({ type, label, value, setter, required, allowAllCharacters, help }) => {\r\n  const id = nanoid();\r\n  const handleChange = (event) => {\r\n    let newValue = event.target.value;\r\n    setter(type === 'number'\r\n      ? parseFloat(newValue)\r\n      : !allowAllCharacters ? removeInvalidCharacters(newValue)\r\n      : newValue);\r\n  };\r\n\r\n  if (value === null || Number.isNaN(value)) {\r\n    value = '';\r\n  }\r\n\r\n  return (\r\n    <TextField\r\n      sx={{\r\n        width: '100%'\r\n      }}\r\n      id={id}\r\n      label={label}\r\n      required={required}\r\n      error={required && value === '' ? true : false}\r\n      variant=\"standard\"\r\n      type={type}\r\n      value={value}\r\n      onChange={handleChange}\r\n      InputProps={{\r\n        readOnly: !setter,\r\n        endAdornment: help\r\n          ? <AppInputHelp content={help} />\r\n          : null\r\n      }}\r\n    />\r\n  );\r\n});\r\n"],"names":["styled","Accordion","_ref","theme","border","concat","palette","divider","boxShadow","borderBottom","display","margin","AccordionDetails","padding","spacing","GridValid","Grid","alignItems","GridInvalid","color","justifyContent","StyledAccordionSummary","props","_jsx","AccordionSummary","style","minHeight","expandIcon","ExpandMoreIcon","backgroundColor","mode","marginBottom","breakpoints","only","observer","_ref2","item","param1","removeLabel","removeCallback","moveUpCallback","canMoveUpCallback","canMoveDownCallback","moveDownCallback","validationParameter","validationParameter2","isValid","id","children","width","_jsxs","container","xs","sm","FormControlLabel","label","onClick","event","stopPropagation","onFocus","control","IconButton","size","DeleteIcon","ArrowUpwardIcon","edge","ArrowDownwardIcon","Typography","getDisplayName","ErrorOutlineIcon","Button","variant","startIcon","AddIcon","configuration","deviceList","configurationValue","getConfigurationValue","Card","CardHeader","sx","title","titleTypographyProps","align","CardContent","gutterBottom","length","fontWeight","React","AppTextInput","value","allowAllCharacters","marginTop","navigator","clipboard","writeText","Alert","severity","classes","root","Root","flexWrap","ElementWithHelp","element","help","className","nanoid","anchorEl","setAnchorEl","open","Boolean","popperId","undefined","currentTarget","HelpIcon","fontSize","cursor","Popper","placement","maxWidth","overflow","emptyFilters","getFilterTypes","hasLightModes","device","totalLights","excludeList","push","highMemory","bikeRadar","profileName","barometer","solar","filterList","f","indexOf","filterGroups","lightData","lightModes","modes","filterTypes","setFilterTypes","createFilterGroup","action","FilterGroup","removeFilterGroup","filterGroup","remove","createFilter","filters","Filter","canMoveUpFilterGroup","moveUpFilterGroup","arrayMoveUp","canMoveDownFilterGroup","moveDownFilterGroup","arrayMoveDown","useEffect","forEach","filter","find","t","type","setType","List","map","TransitionProps","unmountOnExit","expanded","onChange","setOpen","handleChange","setter","setName","name","AppSelect","required","items","setLightMode","lightMode","setActivationDelay","activationDelay","setDeactivationDelay","deactivationDelay","Filters","AddButton","BootstrapTooltip","Tooltip","arrow","popper","tooltipClasses","primary","dark","ValueLabelComponent","enterTouchDelay","_ref3","getLabelText","step","min","max","defaultValue","disabled","Slider","marks","components","ValueLabel","valueLabelFormat","valueLabelDisplay","newValue","operatorList","setOperator","getBatteryOperator","operator","AppSlider","setValue","getBatteryValue","batteryStateList","note","useContext","AppContext","units","speed","setSpeed","newSpeed","Number","isNaN","Math","round","mps","speedUnitList","gpsAccuracyList","timerStateList","context","Date","TimePicker","ampm","timeFormat","renderInput","params","TextField","getInitValue","addSeconds","startOfToday","getFilterValue","differenceInSeconds","state","setState","fromValue","fromType","toValue","toType","setFromValue","setSeconds","setToValue","timespanTypeList","setFromType","AppTimePicker","setToType","StyledMapContainer","MapContainer","height","Polygons","polygons","mappings","handleDrawStart","e","workingLayer","on","sourceTarget","getLatLngs","polygon","pm","Draw","Polygon","_finishShape","_enabled","_removeLastVertex","handleEdit","layer","_leaflet_id","setVertexes","handleCreate","handleRemove","off","useMap","setGlobalOptions","snappable","allowSelfIntersection","hideMiddleMarkers","addControls","position","drawCircle","drawMarker","drawCircleMarker","drawRectangle","drawPolyline","cutPolygon","Toolbar","changeActionsOfControl","group","featureGroup","p","vertexes","addTo","addLayer","fitBounds","getBounds","locate","once","zoomIn","panTo","latlng","center","zoom","scrollWheelZoom","TileLayer","attribution","url","vehicleThreatList","range","setRange","newRange","distanceUnitList","setThreatOperator","threatOperator","setThreat","threat","setList","headlightMode","taillightMode","bothSet","controlMode","LightsPaper","getHeadlightNode","headlight","LightModeSelection","setControlMode","getMiddleNode","taillight","logicalOperators","getTaillightNode","removeFilter","canMoveUpFilter","moveUpFilter","canMoveDownFilter","moveDownFilter","TimespanFilter","PositionFilter","BatteryFilter","NumberFilter","SpeedFilter","GpsAccuracyFilter","TimerStateFilter","BikeRadarFilter","StartLocationFilter","ProfileNameFilter","LightsModeFilter","AppCheckbox","useIndividualNetwork","setUseIndividualNetwork","flexGrow","buttonGroup","index","moveGroup","addButton","removeButton","ref","useRef","handlerId","drop","useDrop","accept","collect","monitor","getHandlerId","hover","_ref$current","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","isGroup","LightButtonGroup","isDragging","drag","useDrag","getButtonTemplate","button","Paper","setMode","opacity","buttons","RemoveIcon","getModes","currentConfiguration","buttonColorTemplate","createMenuItemColorTemplateFunc","buttonTextColorTemplate","lightPanel","setModes","addButtonGroup","LightButton","buttonGroups","useCallback","dragGroup","splice","setLightName","lightName","getButtonColors","setButtonColor","buttonColor","itemTemplateFunc","getButtonTextColors","setButtonTextColor","buttonTextColor","groupNameVisibility","setGroupNameVisibility","ButtonGroup","lightSettings","moveButton","dragButton","sectionTitle","StyledCard","getLightData","lights","l","getDefaultPanel","_lights$find","defaultLightPanel","itemTemplate","globalFilterGroups","lightType","lightList","lightFilterGroups","setLight","light","setLightModes","setAdditionalLightModes","setDefaultMode","defaultMode","setLightPanel","setLightSettings","deviceNumber","setDeviceNumber","serialNumber","setSerialNumber","forceSmartMode","setForceSmartMode","lightIconTapBehavior","setLightIconTapBehavior","lightIconColor","setLightIconColor","setLightData","hasFilters","LightPanelModel","LightModeCycleBehavior","LightSettingsModel","data","additionalLightModes","nativePairing","src","alt","getLightIconColors","FilterGroups","touchScreen","LightIconTapBehavior","LightPanel","settings","LightSettings","m","lm","controlModeList","setControlModes","controlModes","multiple","containsManualMode","manualModeBehaviorList","setManualModeBehavior","manualModeBehavior","operators","hasOperator","headlightId","taillightId","getLight","setConfiguration","existingConfigurationValue","parseError","newConfiguration","Configuration","parse","Icon","backgroundImage","verticalAlign","borderWidth","borderRadius","hexColor","toString","padStart","iconForAll","ColorIcon","marginRight","Checkbox","checked","target","content","InputAdornment","isDefault","val","Array","isArray","resetValue","i","select","error","SelectProps","renderValue","ids","_items$find","join","InputProps","readOnly","endAdornment","AppInputHelp","Close","MenuItem","parseFloat","replace","removeInvalidCharacters"],"sourceRoot":""}