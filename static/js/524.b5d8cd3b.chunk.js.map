{"version":3,"file":"static/js/524.b5d8cd3b.chunk.js","mappings":"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","sources":["actions/CycleLightModes.js","actions/ChangeLightMode.js","actions/ChangeConfiguration.js","actions/PlayTone.js","components/RemoteControllerButtonActions.js","components/RemoteControllerButtons.js","components/RemoteControllers.js","components/DeviceConfiguration.js","components/UserConfigurations.js","components/DataFieldConfiguration.js"],"sourcesContent":["import React from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport { observer } from 'mobx-react-lite';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport LightsPaper from '../components/LightsPaper';\r\nimport LightIconTapBehavior from '../components/LightIconTapBehavior';\r\nimport { toneList } from '../constants';\r\n\r\nexport default observer(({ configuration, action }) => {\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={3} sx={{ marginBottom: 2 }}>\r\n        <Grid item xs={12} sm={6}>\r\n          <AppSelect items={toneList} label=\"Press tone\" setter={action.setToneId} value={action.toneId} />\r\n        </Grid>\r\n      </Grid>\r\n      <LightsPaper\r\n        configuration={configuration}\r\n        getHeadlightNode={(headlight) => (\r\n          <LightIconTapBehavior lightIconTapBehavior={action.headlightTapBehavior} lightModes={headlight.modes} />\r\n        )}\r\n        getTaillightNode={(taillight) => (\r\n          <LightIconTapBehavior lightIconTapBehavior={action.taillightTapBehavior} lightModes={taillight.modes} />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport { observer } from 'mobx-react-lite';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport { toneList } from '../constants';\r\nimport LightsPaper from '../components/LightsPaper';\r\nimport LightModeSelection from '../components/LightModeSelection';\r\n\r\nexport default observer(({ configuration, action }) => {\r\n\r\n  const headlightMode = action.headlightMode;\r\n  const taillightMode = action.taillightMode;\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={3} sx={{ marginBottom: 2 }}>\r\n        <Grid item xs={12} sm={6}>\r\n          <AppSelect items={toneList} label=\"Press tone\" setter={action.setToneId} value={action.toneId} />\r\n        </Grid>\r\n      </Grid>\r\n      <LightsPaper\r\n        configuration={configuration}\r\n        getHeadlightNode={(headlight) => (\r\n          <LightModeSelection\r\n            controlMode={headlightMode.controlMode} setControlMode={headlightMode.setControlMode}\r\n            lightMode={headlightMode.lightMode} setLightMode={headlightMode.setLightMode} lightModes={headlight.modes} />\r\n        )}\r\n        getTaillightNode={(taillight) => (\r\n          <LightModeSelection\r\n            controlMode={taillightMode.controlMode} setControlMode={taillightMode.setControlMode}\r\n            lightMode={taillightMode.lightMode} setLightMode={taillightMode.setLightMode} lightModes={taillight.modes} />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport { observer } from 'mobx-react-lite';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport { configurationList, toneList } from '../constants';\r\n\r\nexport default observer(({ action }) => {\r\n\r\n  return (\r\n    <Grid container spacing={3} sx={{ marginBottom: 2 }}>\r\n      <Grid item xs={12} sm={6}>\r\n        <AppSelect required items={configurationList} label=\"Configuration\" setter={action.setConfigurationId} value={action.configurationId} />\r\n      </Grid>\r\n      <Grid item xs={12} sm={6}>\r\n        <AppSelect items={toneList} label=\"Press tone\" setter={action.setToneId} value={action.toneId} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport { action } from 'mobx';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport Typography from '@mui/material/Typography';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { observer } from 'mobx-react-lite';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport Tone from '../models/Tone';\r\nimport ToneItem from '../models/ToneItem';\r\nimport AddButton from '../components/AddButton';\r\nimport { toneTypeList, toneList } from '../constants';\r\n\r\nconst Root = styled(Grid)(({ theme }) => ({\r\n  flexGrow: 1,\r\n  marginTop: theme.spacing(1)\r\n}));\r\n\r\nexport default observer(({ buttonAction }) => {\r\n  const [state, setState] = React.useState({ toneIndex: 0 });\r\n\r\n  const createTone = action(() => {\r\n    buttonAction.tones.push(new Tone(state.toneIndex));\r\n    setState({ ...state, toneIndex: state.toneIndex + 1 });\r\n  });\r\n  const removeTone = action((tone) => {\r\n    buttonAction.tone.remove(tone);\r\n  });\r\n  const addToneItem = action(() => {\r\n    buttonAction.toneSequence.push(new ToneItem());\r\n  });\r\n  const removeToneItem = action((toneItem) => {\r\n    buttonAction.toneSequence.remove(toneItem);\r\n  });\r\n\r\n  return (\r\n    <Grid container spacing={3} sx={{ marginBottom: 2 }}>\r\n      <Grid item xs={12} sm={6}>\r\n        <AppSelect required items={toneTypeList} label=\"Tone type\" setter={buttonAction.setToneTypeId} value={buttonAction.toneTypeId} />\r\n      </Grid>\r\n      {\r\n        buttonAction.toneTypeId === 2 /* Custom */ ?\r\n        <Grid item xs={12} sm={6}>\r\n          <AppTextInput required label=\"Repeat count\" type=\"number\" value={buttonAction.repeatCount} setter={buttonAction.setRepeatCount} />\r\n        </Grid>\r\n        : null\r\n      }\r\n      {\r\n        buttonAction.toneTypeId === 1 /* Built-in */ ?\r\n        <Grid item xs={12} sm={6}>\r\n          <AppSelect required items={toneList} label=\"Press tone\" setter={buttonAction.setToneId} value={buttonAction.toneId} />\r\n        </Grid>\r\n        : buttonAction.toneTypeId === 2 /* Custom */ ?\r\n        <Grid item container xs={12}>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\">Tones</Typography>\r\n          </Grid>\r\n          <Grid item container xs={12}>\r\n            {buttonAction.tones.map((tone) => (\r\n              <Root container key={tone.id}>\r\n                  <Grid item xs>\r\n                    <Paper sx={{ padding: 2, marginBottom: 1 }}>\r\n                      <Grid container spacing={3}>\r\n                        <Grid item xs={12} sm={4}>\r\n                          <AppTextInput required label=\"Name\" value={tone.name} setter={tone.setName} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4}>\r\n                          <AppTextInput required label=\"Frequency\" type=\"number\" value={tone.frequency} setter={tone.setFrequency} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4}>\r\n                          <AppTextInput required label=\"Duration [ms]\" type=\"number\" value={tone.duration} setter={tone.setDuration} />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Paper>\r\n                  </Grid>\r\n                  <Grid item xs={1}\r\n                    sx={{\r\n                      display: 'flex',\r\n                      justifyContent: 'center',\r\n                      alignItems: 'center'\r\n                    }}>\r\n                    <Grid container sx={{ margin: 0 }}>\r\n                      <Grid item xs={12} sm={12} sx={{ display: 'flex', justifyContent: 'center' }}>\r\n                        <IconButton\r\n                          aria-label=\"remove\"\r\n                          onClick={() => removeTone(tone)}\r\n                          size=\"large\">\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n              </Root>\r\n            ))}\r\n          </Grid>\r\n          <AddButton onClick={() => createTone()}>\r\n            Create Tone\r\n          </AddButton>\r\n\r\n          <Grid item xs={12} sx={{ marginTop: 3 }}>\r\n            <Typography variant=\"h5\">Sequence</Typography>\r\n          </Grid>\r\n\r\n          {buttonAction.toneSequence.map((toneItem, index) => (\r\n            <Root item container xs={12} key={toneItem.id}>\r\n              <Grid container>\r\n                <Grid item xs>\r\n                  <Paper sx={{ padding: 2, marginBottom: 1 }}>\r\n                    <Grid container spacing={3}>\r\n                      <Grid item xs={12}>\r\n                        <AppSelect items={buttonAction.tones} required label=\"Tone\" setter={toneItem.setToneId} value={toneItem.toneId} />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Paper>\r\n                </Grid>\r\n                <Grid item xs={1}\r\n                  sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center'\r\n                  }}>\r\n                  <Grid container sx={{ margin: 0 }}>\r\n                    <Grid item xs={12} sm={12} sx={{ display: 'flex', justifyContent: 'center' }}>\r\n                      <IconButton\r\n                        aria-label=\"remove\"\r\n                        onClick={() => removeToneItem(toneItem)}\r\n                        size=\"large\">\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Root>\r\n          ))}\r\n\r\n          <AddButton onClick={() => addToneItem()}>\r\n            Add Tone\r\n          </AddButton>\r\n        </Grid>\r\n        : null\r\n      }\r\n    </Grid>\r\n  );\r\n});\r\n","import React, { useEffect} from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport Accordion from './Accordion';\r\nimport AccordionSummary from './AccordionSummary';\r\nimport AccordionDetails from './AccordionDetails';\r\nimport Filters from './Filters';\r\nimport { observer } from 'mobx-react-lite';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport { action } from 'mobx';\r\nimport { filterList, arrayMoveUp, arrayMoveDown, buttonTriggerList, buttonActionTypeList } from '../constants';\r\nimport { Typography } from '@mui/material';\r\nimport AddButton from './AddButton';\r\nimport Filter from '../models/Filter';\r\nimport CycleLightModes from '../actions/CycleLightModes';\r\nimport ChangeLightMode from '../actions/ChangeLightMode';\r\nimport ChangeConfiguration from '../actions/ChangeConfiguration';\r\nimport PlayTone from '../actions/PlayTone';\r\n\r\nconst excludeList = [\r\n  'A', // Acceleration\r\n  'B' // Light Battery\r\n];\r\n\r\nconst filterTypes = filterList.filter(f => excludeList.indexOf(f.id) < 0);\r\n\r\nconst getButtonTriggers = (enableDoubleClick) => {\r\n  return enableDoubleClick ? buttonTriggerList : buttonTriggerList.filter(t => t.id !== 3 /* Double-click */);\r\n}\r\n\r\nexport default observer(({ configuration, device, actions, enableDoubleClick }) => {\r\n  const [buttonTriggers, setButtonTriggers] = React.useState(getButtonTriggers(enableDoubleClick));\r\n  useEffect(() => {\r\n    setButtonTriggers(getButtonTriggers(enableDoubleClick));\r\n  }, [enableDoubleClick, setButtonTriggers]);\r\n\r\n  const removeAction = action((action) => {\r\n    actions.remove(action);\r\n  });\r\n  const handleChange = (action) => {\r\n    action.setOpen(!action.open);\r\n  };\r\n  const canMoveUpAction = (action) => {\r\n    return actions.indexOf(action) > 0;\r\n  };\r\n  const moveUpAction = action((action) => {\r\n    arrayMoveUp(actions, action);\r\n  });\r\n  const canMoveDownAction = (action) => {\r\n    return actions.indexOf(action) < (actions.length - 1);\r\n  };\r\n  const moveDownAction = action((action) => {\r\n    arrayMoveDown(actions, action);\r\n  });\r\n  const addActionCondition = action((action) => {\r\n    action.conditions.push(new Filter());\r\n  });\r\n\r\n  return actions.map(action => (\r\n    <Accordion key={action.id}\r\n      TransitionProps={{ unmountOnExit: true }}\r\n      expanded={action.open}\r\n      onChange={() => handleChange(action)}>\r\n        <AccordionSummary\r\n          item={action}\r\n          validationParameter={configuration}\r\n          validationParameter2={device}\r\n          removeCallback={removeAction}\r\n          canMoveUpCallback={canMoveUpAction}\r\n          moveUpCallback={moveUpAction}\r\n          canMoveDownCallback={canMoveDownAction}\r\n          moveDownCallback={moveDownAction}\r\n        />\r\n      <AccordionDetails>\r\n        <Grid container spacing={3} sx={{ marginBottom: 3 }}>\r\n          <Grid item xs={12} sm={6}>\r\n            <AppSelect items={buttonActionTypeList} required label=\"Action type\" setter={action.setActionType} value={action.actionType} />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <AppSelect items={buttonTriggers} required label=\"Trigger\" setter={action.setTriggerId} value={action.triggerId} />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {\r\n          action.actionType === 1 /* Cycle light modes */ ? <CycleLightModes configuration={configuration} action={action} />\r\n            : action.actionType === 2 /* Change light mode */ ? <ChangeLightMode configuration={configuration} action={action} />\r\n            : action.actionType === 3 /* Change configuration */ ? <ChangeConfiguration action={action} />\r\n            : action.actionType === 4 /* Play tone */ ? <PlayTone buttonAction={action} />\r\n            : null\r\n        }\r\n        {\r\n          action.actionType != null ?\r\n            <Grid container spacing={3} sx={{ marginTop: 2 }}>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h5\" gutterBottom>Conditions</Typography>\r\n              </Grid>\r\n            </Grid>\r\n            : null\r\n        }\r\n        {\r\n          action.actionType != null ?\r\n            <React.Fragment>\r\n              <div>\r\n                <Filters filters={action.conditions} filterTypes={filterTypes} device={device} />\r\n              </div>\r\n              <AddButton onClick={() => addActionCondition(action)}>\r\n                Add Condition\r\n              </AddButton>\r\n            </React.Fragment>\r\n          : null\r\n        }\r\n      </AccordionDetails>\r\n    </Accordion>\r\n  ));\r\n});\r\n","import React from 'react';\r\nimport { action } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\nimport Grid from '@mui/material/Grid';\r\nimport { Typography } from '@mui/material';\r\nimport Accordion from './Accordion';\r\nimport AccordionSummary from './AccordionSummary';\r\nimport AccordionDetails from './AccordionDetails';\r\nimport AddButton from './AddButton';\r\nimport ElementWithHelp from './ElementWithHelp';\r\nimport RemoteControllerButtonActions from './RemoteControllerButtonActions';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppCheckbox from '../inputs/AppCheckbox';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport RemoteControllerButtonAction from '../models/RemoteControllerButtonAction';\r\n\r\nexport default observer(({ configuration, device, remoteController, buttons }) => {\r\n  const removeButton = action((button) => {\r\n    buttons.remove(button);\r\n  });\r\n  const handleChange = (button) => {\r\n    button.setOpen(!button.open);\r\n  };\r\n  const addButtonAction = action((button) => {\r\n    button.actions.push(new RemoteControllerButtonAction());\r\n  });\r\n\r\n  return buttons.map(button => (\r\n    <Accordion key={button.id}\r\n      TransitionProps={{ unmountOnExit: true }}\r\n      expanded={button.open}\r\n      onChange={() => handleChange(button)}>\r\n      <AccordionSummary\r\n        item={button}\r\n        validationParameter={configuration}\r\n        validationParameter2={device}\r\n        removeCallback={removeButton}\r\n        canMoveUpCallback={() => false}\r\n        canMoveDownCallback={() => false}\r\n      />\r\n      <AccordionDetails>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={6}>\r\n            <AppSelect items={remoteController.buttonSelectList} required label=\"Button\" setter={button.setButtonId} value={button.buttonId} />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            {\r\n              remoteController.hasStandaloneCenterButton() || button.buttonId !== 1 /* Center */ ?\r\n              <AppTextInput required label=\"Device number\" type=\"number\"\r\n                  setter={button.setDeviceNumber}\r\n                  value={button.deviceNumber}\r\n                  help={\r\n                    <React.Fragment>\r\n                      <Typography>\r\n                        The device number that will be used for the virtual ANT+ light. Do note that changing the device number after the pairing is done will require repeating the pairing process.\r\n                      </Typography>\r\n                    </React.Fragment>\r\n                  }\r\n                />\r\n              : null\r\n            }\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <ElementWithHelp\r\n              element={\r\n                <AppCheckbox label=\"Enable double-click\" setter={button.setEnableDoubleClick} value={button.enableDoubleClick} />\r\n              }\r\n              help={\r\n                <Typography gutterBottom>\r\n                  By enabling double-click detection, the action will be delayed up to the set delay as it waits for the second click.\r\n                  If the second click is received after the specified delay, the logic will treat both clicks as single-click.\r\n                </Typography>\r\n              }\r\n            />\r\n          </Grid>\r\n          {\r\n            button.enableDoubleClick ?\r\n            <Grid item xs={12} sm={6}>\r\n              <AppTextInput required label=\"Double-click delay\" type=\"number\" setter={button.setDoubleClickDelay} value={button.doubleClickDelay} />\r\n            </Grid>\r\n            : null\r\n          }\r\n          {\r\n            button.buttonId != null ?\r\n              <Grid item xs={12} sm={12}>\r\n                <Typography variant=\"h5\" gutterBottom>Actions</Typography>\r\n              </Grid>\r\n            : null\r\n          }\r\n\r\n        </Grid>\r\n        {\r\n          button.buttonId != null ?\r\n            <React.Fragment>\r\n              <div>\r\n                <RemoteControllerButtonActions configuration={configuration} device={device} actions={button.actions} enableDoubleClick={button.enableDoubleClick} />\r\n              </div>\r\n              <AddButton onClick={() => addButtonAction(button)}>\r\n                Add Action\r\n              </AddButton>\r\n            </React.Fragment>\r\n          : null\r\n        }\r\n      </AccordionDetails>\r\n    </Accordion>\r\n  ));\r\n});\r\n","import React from 'react';\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport List from '@mui/material/List';\r\nimport Accordion from './Accordion';\r\nimport AccordionSummary from './AccordionSummary';\r\nimport AccordionDetails from './AccordionDetails';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport { action } from 'mobx';\r\nimport { observer } from 'mobx-react-lite'\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\nimport ElementWithHelp from './ElementWithHelp';\r\nimport AddButton from './AddButton';\r\nimport RemoteController from '../models/RemoteController';\r\nimport RemoteControllerButton from '../models/RemoteControllerButton';\r\nimport { remoteControllerList } from '../constants';\r\nimport RemoteControllerButtons from './RemoteControllerButtons';\r\n\r\nexport default observer(({ configuration, device, ...props }) => {\r\n\r\n  const remoteControllers = configuration.remoteControllers;\r\n\r\n  const addController = action(() => {\r\n    remoteControllers.push(new RemoteController());\r\n  });\r\n  const removeController = action((remoteController) => {\r\n    remoteControllers.remove(remoteController);\r\n  });\r\n  const handleChange = (remoteController) => {\r\n    remoteController.setOpen(!remoteController.open);\r\n  };\r\n  const addControllerButton = action((remoteController) => {\r\n    remoteController.buttons.push(new RemoteControllerButton(remoteController));\r\n  });\r\n\r\n  return (\r\n    <Card {...props}>\r\n      <CardHeader\r\n        sx={{padding: 2}}\r\n        title={\r\n          <ElementWithHelp\r\n            element={<Typography variant=\"h5\" align=\"center\">Remote Controllers (Experimental)</Typography>}\r\n            help={\r\n              <Typography>\r\n                In this section it is possible to configure remote controllers (e.g. Bontrager Transmitr) to control lights, change current configuration or/and play tones.\r\n              </Typography>\r\n            }\r\n          />\r\n        }\r\n        titleTypographyProps={{ align: 'center' }}\r\n      />\r\n      <CardContent>\r\n        <div>\r\n          <List sx={{ padding: 0 }}>\r\n            {remoteControllers.map(remoteController => (\r\n            <Accordion key={remoteController.id}\r\n                  TransitionProps={{ unmountOnExit: true }}\r\n                  expanded={remoteController.open}\r\n                  onChange={() => handleChange(remoteController)}>\r\n              <AccordionSummary\r\n                item={remoteController}\r\n                validationParameter={configuration}\r\n                validationParameter2={device}\r\n                removeCallback={removeController}\r\n                canMoveUpCallback={() => false}\r\n                canMoveDownCallback={() => false}\r\n              />\r\n              <AccordionDetails>\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <AppSelect items={remoteControllerList} required label=\"Remote controller\" setter={remoteController.setControllerId} value={remoteController.controllerId} />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <AppTextInput required label=\"Name\" setter={remoteController.setName} value={remoteController.name} />\r\n                  </Grid>\r\n                  {\r\n                    remoteController.controllerId != null ?\r\n                      <Grid item xs={12} sm={12}>\r\n                        <Typography variant=\"h5\" gutterBottom>Buttons</Typography>\r\n                      </Grid>\r\n                    : null\r\n                  }\r\n                </Grid>\r\n                {\r\n                  remoteController.controllerId != null ?\r\n                    <React.Fragment>\r\n                      <div>\r\n                        <RemoteControllerButtons remoteController={remoteController} configuration={configuration} device={device} buttons={remoteController.buttons} />\r\n                      </div>\r\n                      <AddButton onClick={() => addControllerButton(remoteController)}>\r\n                        Setup Button\r\n                      </AddButton>\r\n                    </React.Fragment>\r\n                  : null\r\n                }\r\n              </AccordionDetails>\r\n            </Accordion>\r\n            ))}\r\n          </List>\r\n          <div>\r\n            <AddButton onClick={addController}>\r\n              Add Controller\r\n            </AddButton>\r\n          </div>\r\n        </div>\r\n\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport { observer } from 'mobx-react-lite'\r\nimport FilterGroups from './FilterGroups';\r\nimport LightConfiguration from './LightConfiguration';\r\nimport ConfigurationResult from './ConfigurationResult';\r\nimport ElementWithHelp from './ElementWithHelp';\r\nimport IndividualLightNetwork from './IndividualLightNetwork';\r\nimport RemoteControllers from './RemoteControllers';\r\nimport { headlightList, taillightList, getDeviceLights, areRemoteControllersSupported } from '../constants';\r\n\r\nconst Root = styled('div')(({ theme }) => ({\r\n  [`& .MuiCardHeader-root`]: {\r\n    backgroundColor:\r\n      theme.palette.mode === 'light'\r\n        ? theme.palette.grey[200]\r\n        : theme.palette.grey[700]\r\n  },\r\n\r\n  [`& .MuiCardHeader-root .ElementWithHelp-root`]: {\r\n    justifyContent: 'center'\r\n  },\r\n\r\n  [`& .MuiCard-root`]: {\r\n    marginTop: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nexport default observer(({ configuration, device, deviceList }) => {\r\n  return (\r\n    <Root>\r\n      <IndividualLightNetwork device={device} configuration={configuration} />\r\n      <Card sx={{marginTop: 2}}>\r\n        <CardHeader\r\n          title={\r\n            <ElementWithHelp\r\n              element={<Typography variant=\"h5\" align=\"center\">Global Filters</Typography>}\r\n              help={\r\n                <Typography>\r\n                  Global filters are the first filters that are checked by the Smart control mode to determine whether the lights can be turned on. In\r\n                  case we define one or more global filters and none them is matched, then the lights won't be turned on. In case we don't define\r\n                  any global filter or at least one of them is matched, then the light mode will be determine by the filters in the below Headlight/Taillight\r\n                  Configuration section.\r\n                </Typography>\r\n              }\r\n            />\r\n          }\r\n          titleTypographyProps={{ align: 'center' }}\r\n          sx={{padding: 0.5}}\r\n        />\r\n        <CardContent>\r\n          <Grid item xs={12} sm={12}>\r\n            <ElementWithHelp\r\n              sx={{marginBottom: 1}}\r\n              element={<Typography variant=\"h5\">Filter groups</Typography>}\r\n              help={\r\n                <React.Fragment>\r\n                  <Typography>\r\n                    Global filter groups contains a list of groups, where each group can have one or more filters, that are used by the Smart mode to determine\r\n                    whether the lights can be turned on. A filter group is matched, when all filters inside it are matched. Rules:\r\n                  </Typography>\r\n                  <ul>\r\n                    <li><Typography>When no filters groups are added or at least one of them is matched, the light mode will be determined by the below Headlight/Taillight Configuration section</Typography></li>\r\n                    <li><Typography>When one or more filters groups are added and none of them is matched, then the lights won't be turned on</Typography></li>\r\n                  </ul>\r\n                  <Typography>\r\n                   They are useful when having a condition that applies to all lights. For example, in case we want the lights to be turned on only when recording an activity.\r\n                  </Typography>\r\n                </React.Fragment>\r\n              }\r\n            />\r\n          </Grid>\r\n          <FilterGroups filterGroups={configuration.globalFilterGroups} device={device} totalLights={configuration.getTotalLights()} />\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <LightConfiguration\r\n        globalFilterGroups={configuration.globalFilterGroups}\r\n        useIndividualNetwork={configuration.useIndividualNetwork}\r\n        device={device}\r\n        totalLights={configuration.getTotalLights()}\r\n        lightType=\"Headlight\"\r\n        lightList={getDeviceLights(device, headlightList, configuration.useIndividualNetwork)}\r\n        lightFilterGroups={configuration.headlightFilterGroups}\r\n        light={configuration.headlight}\r\n        setLight={configuration.setHeadlight}\r\n        setLightModes={configuration.setHeadlightModes}\r\n        setAdditionalLightModes={configuration.setHeadlightAdditionalModes}\r\n        setDefaultMode={configuration.setHeadlightDefaultMode}\r\n        defaultMode={configuration.headlightDefaultMode}\r\n        lightPanel={configuration.headlightPanel}\r\n        setLightPanel={configuration.setHeadlightPanel}\r\n        lightSettings={configuration.headlightSettings}\r\n        setLightSettings={configuration.setHeadlightSettings}\r\n        deviceNumber={configuration.headlightDeviceNumber}\r\n        setDeviceNumber={configuration.setHeadlightDeviceNumber}\r\n        serialNumber={configuration.headlightSerialNumber}\r\n        setSerialNumber={configuration.setHeadlightSerialNumber}\r\n        forceSmartMode={configuration.headlightForceSmartMode}\r\n        setForceSmartMode={configuration.setHeadlightForceSmartMode}\r\n        lightIconTapBehavior={configuration.headlightIconTapBehavior}\r\n        setLightIconTapBehavior={configuration.setHeadlightIconTapBehavior}\r\n        lightIconColor={configuration.headlightIconColor}\r\n        setLightIconColor={configuration.setHeadlightIconColor}\r\n      />\r\n      <LightConfiguration\r\n        globalFilterGroups={configuration.globalFilterGroups}\r\n        useIndividualNetwork={configuration.useIndividualNetwork}\r\n        device={device}\r\n        totalLights={configuration.getTotalLights()}\r\n        lightType=\"Taillight\"\r\n        lightList={getDeviceLights(device, taillightList, configuration.useIndividualNetwork)}\r\n        light={configuration.taillight}\r\n        setLight={configuration.setTaillight}\r\n        setLightModes={configuration.setTaillightModes}\r\n        setAdditionalLightModes={configuration.setTaillightAdditionalModes}\r\n        lightFilterGroups={configuration.taillightFilterGroups}\r\n        setDefaultMode={configuration.setTaillightDefaultMode}\r\n        defaultMode={configuration.taillightDefaultMode}\r\n        lightPanel={configuration.taillightPanel}\r\n        setLightPanel={configuration.setTaillightPanel}\r\n        lightSettings={configuration.taillightSettings}\r\n        setLightSettings={configuration.setTaillightSettings}\r\n        deviceNumber={configuration.taillightDeviceNumber}\r\n        setDeviceNumber={configuration.setTaillightDeviceNumber}\r\n        serialNumber={configuration.taillightSerialNumber}\r\n        setSerialNumber={configuration.setTaillightSerialNumber}\r\n        forceSmartMode={configuration.taillightForceSmartMode}\r\n        setForceSmartMode={configuration.setTaillightForceSmartMode}\r\n        lightIconTapBehavior={configuration.taillightIconTapBehavior}\r\n        setLightIconTapBehavior={configuration.setTaillightIconTapBehavior}\r\n        lightIconColor={configuration.taillightIconColor}\r\n        setLightIconColor={configuration.setTaillightIconColor}\r\n      />\r\n      {\r\n        areRemoteControllersSupported(device) ? <RemoteControllers configuration={configuration} device={device} /> : null\r\n      }\r\n      <ConfigurationResult\r\n        configuration={configuration}\r\n        deviceList={deviceList}\r\n      />\r\n    </Root>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react-lite'\r\nimport { makeAutoObservable } from 'mobx';\r\nimport Box from '@mui/material/Box';\r\nimport Fab from '@mui/material/Fab';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport Grid from '@mui/material/Grid';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Alert from '@mui/material/Alert';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport FirebaseService from '../services/FirebaseService';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport Configuration from '../models/Configuration';\r\nimport AppTextInput from '../inputs/AppTextInput';\r\n\r\nclass SaveDialogModel {\r\n  saveMode = null;\r\n  name = '';\r\n  isNew = false;\r\n\r\n  constructor(overrideExisting, name) {\r\n    this.saveMode = overrideExisting ? 'override' : 'new';\r\n    this.name = name || '';\r\n    this.isNew = !overrideExisting;\r\n    makeAutoObservable(this, {\r\n      id: false\r\n    });\r\n  }\r\n\r\n  setName = (value) => {\r\n    this.name = value;\r\n  }\r\n\r\n  setSaveMode = (value) => {\r\n    this.saveMode = value;\r\n  }\r\n\r\n  isValid() {\r\n    return (this.saveMode === 'override' && this.name) || this.name;\r\n  }\r\n}\r\n\r\nexport default observer(({ configuration, setConfiguration, deviceList, currentUser }) => {\r\n\r\n  const [state, setState] = React.useState({\r\n    parseError: false,\r\n    showDeleteDialog: false,\r\n    showSaveDialog: false,\r\n    saveDialogModel: new SaveDialogModel(false, null)\r\n  });\r\n\r\n  const parse = (value) => {\r\n    let newConfiguration = null;\r\n    try {\r\n      newConfiguration = Configuration.parse(value, deviceList);\r\n      if (!!newConfiguration) {\r\n        setConfiguration(newConfiguration);\r\n      }\r\n    }\r\n    catch {}\r\n    finally {\r\n      return newConfiguration;\r\n    }\r\n  };\r\n\r\n  const setSelectedConfiguration = (configurationId) => {\r\n    let parseError = false;\r\n    if (configurationId) {\r\n      const data = FirebaseService.userConfigurations.find(o => o.id === configurationId);\r\n      parseError = !parse(data.value);\r\n    } else {\r\n      setConfiguration(new Configuration())\r\n    }\r\n\r\n    FirebaseService.setSelectedConfiguration(configurationId);\r\n    setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        parseError: parseError\r\n      };\r\n    })\r\n  };\r\n\r\n  const openSaveDialog = () => {\r\n    const configurationId = FirebaseService.selectedConfiguration;\r\n    let configurationData;\r\n    if (configurationId) {\r\n      configurationData = FirebaseService.userConfigurations.find(o => o.id === configurationId);\r\n    }\r\n\r\n    setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        showSaveDialog: true,\r\n        saveDialogModel: new SaveDialogModel(configurationId != null, configurationData?.name)\r\n      };\r\n    })\r\n  };\r\n\r\n  const closeSaveDialog = () => {\r\n    setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        showSaveDialog: false\r\n      };\r\n    })\r\n  };\r\n\r\n  const saveConfiguration = async () => {\r\n    let configurationId = FirebaseService.selectedConfiguration;\r\n    if (state.saveDialogModel.saveMode === 'new') {\r\n      configurationId = await FirebaseService.saveConfigurationAsync(state.saveDialogModel.name, configuration.getConfigurationValue(deviceList));\r\n    } else {\r\n      await FirebaseService.updateConfigurationAsync(configurationId, state.saveDialogModel.name, configuration.getConfigurationValue(deviceList));\r\n    }\r\n\r\n    FirebaseService.setSelectedConfiguration(configurationId);\r\n    closeSaveDialog();\r\n  };\r\n\r\n  const openDeleteDialog = () => {\r\n    setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        showDeleteDialog: true\r\n      };\r\n    })\r\n  };\r\n\r\n  const closeDeleteDialog = () => {\r\n    setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        showDeleteDialog: false\r\n      };\r\n    })\r\n  };\r\n\r\n  const deleteSelectedConfiguration = async () => {\r\n    await FirebaseService.deleteConfigurationAsync(FirebaseService.selectedConfiguration);\r\n    setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n      };\r\n    });\r\n    closeDeleteDialog();\r\n  }\r\n\r\n  const style = {\r\n    margin: 0,\r\n    top: 'auto',\r\n    right: 20,\r\n    bottom: 20,\r\n    left: 'auto',\r\n    position: 'fixed',\r\n  };\r\n\r\n  return (\r\n    currentUser\r\n        ?\r\n        <Grid container spacing={2} sx={{ marginBottom: 4 }}  justifyContent=\"center\">\r\n          <Grid item xs={8} sm={10}>\r\n            <AppSelect label=\"Saved configurations\" items={FirebaseService.userConfigurations} setter={setSelectedConfiguration} value={FirebaseService.selectedConfiguration} />\r\n          </Grid>\r\n          <Grid item xs={4} sm={2} sx={{\r\n            marginBottom: 'auto',\r\n            marginTop: 'auto'\r\n          }}>\r\n            <Button variant=\"contained\" disabled={!FirebaseService.selectedConfiguration || state.parseError} onClick={() => {navigator.clipboard.writeText(configuration.getConfigurationValue(deviceList))}}>Copy</Button>\r\n            <IconButton\r\n              color=\"error\"\r\n              disabled={!FirebaseService.selectedConfiguration}\r\n              style={{ marginLeft: \"0.5em\", padding: '0' }}\r\n              onClick={openDeleteDialog}\r\n              size=\"large\">\r\n              <DeleteIcon />\r\n            </IconButton>\r\n            <Dialog\r\n              open={state.showDeleteDialog}\r\n              onClose={closeDeleteDialog}\r\n              aria-labelledby=\"delete-dialog-title\"\r\n              aria-describedby=\"delete-dialog-description\"\r\n            >\r\n              <DialogTitle sx={{ minWidth: 300 }} id=\"delete-dialog-title\">Delete configuration</DialogTitle>\r\n              <DialogContent>\r\n                <DialogContentText id=\"delete-dialog-description\">\r\n                  Do you want to delete the selected configuration?\r\n                </DialogContentText>\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={closeDeleteDialog}>No</Button>\r\n                <Button onClick={deleteSelectedConfiguration} autoFocus>\r\n                  Yes\r\n                </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n              open={state.showSaveDialog}\r\n              onClose={closeSaveDialog}\r\n              aria-labelledby=\"save-dialog-title\"\r\n              aria-describedby=\"save-dialog-description\"\r\n            >\r\n              <DialogTitle sx={{ minWidth: 300 }} id=\"save-dialog-title\">Save configuration</DialogTitle>\r\n              <DialogContent>\r\n                {\r\n                  state.saveDialogModel?.isNew\r\n                  ? <AppTextInput required label=\"Configuration name\" setter={state.saveDialogModel.setName} value={state.saveDialogModel.name} />\r\n                  : <div>\r\n                      <RadioGroup\r\n                        defaultValue=\"override\"\r\n                        value={state.saveDialogModel.saveMode}\r\n                        onChange={(e) => state.saveDialogModel.setSaveMode(e.target.value) }\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel value=\"override\" control={<Radio />} label=\"Override existing configuration\" />\r\n                        <FormControlLabel value=\"new\" control={<Radio />} label=\"Save as a new configuration\" />\r\n                      </RadioGroup>\r\n                      <AppTextInput required label=\"Configuration name\" setter={state.saveDialogModel.setName} value={state.saveDialogModel.name} />\r\n                    </div>\r\n                }\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={closeSaveDialog}>Cancel</Button>\r\n                <Button disabled={!state.saveDialogModel.isValid()} onClick={saveConfiguration} autoFocus>\r\n                  Confirm\r\n                </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n          </Grid>\r\n          { state.parseError ?\r\n            <Grid item xs={12} sm={12}>\r\n              <Alert severity=\"error\">Invalid configuration.</Alert>\r\n            </Grid>\r\n            : null\r\n          }\r\n          {\r\n            configuration && configuration.isValid(deviceList)\r\n            ?\r\n              <Box style={style}>\r\n                <Fab color=\"primary\" title=\"Save\" aria-label=\"add\" onClick={openSaveDialog}>\r\n                  <SaveIcon />\r\n                </Fab>\r\n              </Box>\r\n            : null\r\n          }\r\n        </Grid>\r\n      : null\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { action } from 'mobx';\r\nimport Grid from '@mui/material/Grid';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { timeFormatList, unitList, getSeparatorColors } from '../constants';\r\nimport AppSelect from '../inputs/AppSelect';\r\nimport DeviceConfiguration from './DeviceConfiguration';\r\nimport ParseConfiguration from './ParseConfiguration';\r\nimport UserConfigurations from './UserConfigurations';\r\nimport { createMenuItemColorTemplateFunc } from './Templates';\r\nimport { getDevice, deviceList } from '../dataFieldConstants';\r\nimport { Alert, Link } from '@mui/material';\r\n\r\nconst itemTemplate = createMenuItemColorTemplateFunc();\r\n\r\nexport default observer(({ configuration, setConfiguration, currentUser }) => {\r\n  const setNewConfiguration = action((newConfiguration) => {\r\n    setConfiguration(newConfiguration);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Alert severity=\"info\">\r\n        Hard to understand? <Link target=\"_blank\" rel=\"noopener\" href=\"https://github.com/maca88/SmartBikeLights/wiki/Lights-Configurator\">Check the documentation</Link>\r\n      </Alert>\r\n      <UserConfigurations configuration={configuration} setConfiguration={setConfiguration} deviceList={deviceList} currentUser={currentUser} />\r\n      <ParseConfiguration setConfiguration={setNewConfiguration} deviceList={deviceList} />\r\n      <Grid container spacing={2} sx={{ marginBottom: 2 }} justifyContent=\"center\">\r\n        <Grid item xs={12} sm={4}>\r\n          <AppSelect required items={deviceList} label=\"Garmin device\" setter={configuration.setDevice} value={configuration.device} />\r\n        </Grid>\r\n        <Grid item xs={6} sm={4}>\r\n          <AppSelect required items={unitList} label=\"Units\" setter={configuration.setUnits} value={configuration.units} />\r\n        </Grid>\r\n        <Grid item xs={6} sm={4}>\r\n          <AppSelect required items={timeFormatList} label=\"Time format\" setter={configuration.setTimeFormat} value={configuration.timeFormat} />\r\n        </Grid>\r\n      </Grid>\r\n      { configuration.device ?\r\n        <div>\r\n          <Grid container spacing={2} sx={{ marginBottom: 2 }} justifyContent=\"left\">\r\n            <Grid item xs={12} sm={4}>\r\n              <AppSelect required items={getSeparatorColors(getDevice(configuration.device))} label=\"Separator color\" setter={configuration.setSeparatorColor} value={configuration.separatorColor} itemTemplateFunc={itemTemplate} />\r\n            </Grid>\r\n          </Grid>\r\n          <DeviceConfiguration configuration={configuration} device={getDevice(configuration.device)} deviceList={deviceList} />\r\n        </div>\r\n        : null\r\n      }\r\n    </div>\r\n  );\r\n});\r\n"],"names":["observer","_ref","configuration","action","_jsxs","children","_jsx","Grid","container","spacing","sx","marginBottom","item","xs","sm","AppSelect","items","toneList","label","setter","setToneId","value","toneId","LightsPaper","getHeadlightNode","headlight","LightIconTapBehavior","lightIconTapBehavior","headlightTapBehavior","lightModes","modes","getTaillightNode","taillight","taillightTapBehavior","headlightMode","taillightMode","LightModeSelection","controlMode","setControlMode","lightMode","setLightMode","required","configurationList","setConfigurationId","configurationId","Root","styled","theme","flexGrow","marginTop","_ref2","buttonAction","state","setState","React","toneIndex","createTone","tones","push","Tone","removeTone","tone","remove","addToneItem","toneSequence","ToneItem","removeToneItem","toneItem","toneTypeList","setToneTypeId","toneTypeId","AppTextInput","type","repeatCount","setRepeatCount","Typography","variant","map","Paper","padding","name","setName","frequency","setFrequency","duration","setDuration","display","justifyContent","alignItems","margin","IconButton","onClick","size","DeleteIcon","id","AddButton","index","excludeList","filterTypes","filterList","f","indexOf","getButtonTriggers","enableDoubleClick","buttonTriggerList","t","device","actions","buttonTriggers","setButtonTriggers","useEffect","removeAction","canMoveUpAction","moveUpAction","arrayMoveUp","canMoveDownAction","length","moveDownAction","arrayMoveDown","addActionCondition","conditions","Filter","Accordion","TransitionProps","unmountOnExit","expanded","open","onChange","setOpen","handleChange","AccordionSummary","validationParameter","validationParameter2","removeCallback","canMoveUpCallback","moveUpCallback","canMoveDownCallback","moveDownCallback","AccordionDetails","buttonActionTypeList","setActionType","actionType","setTriggerId","triggerId","CycleLightModes","ChangeLightMode","ChangeConfiguration","PlayTone","gutterBottom","Filters","filters","remoteController","buttons","removeButton","button","addButtonAction","RemoteControllerButtonAction","buttonSelectList","setButtonId","buttonId","hasStandaloneCenterButton","setDeviceNumber","deviceNumber","help","ElementWithHelp","element","AppCheckbox","setEnableDoubleClick","setDoubleClickDelay","doubleClickDelay","RemoteControllerButtonActions","props","remoteControllers","addController","RemoteController","removeController","addControllerButton","RemoteControllerButton","Card","CardHeader","title","align","titleTypographyProps","CardContent","List","remoteControllerList","setControllerId","controllerId","RemoteControllerButtons","backgroundColor","palette","mode","grey","deviceList","IndividualLightNetwork","FilterGroups","filterGroups","globalFilterGroups","totalLights","getTotalLights","LightConfiguration","useIndividualNetwork","lightType","lightList","getDeviceLights","headlightList","lightFilterGroups","headlightFilterGroups","light","setLight","setHeadlight","setLightModes","setHeadlightModes","setAdditionalLightModes","setHeadlightAdditionalModes","setDefaultMode","setHeadlightDefaultMode","defaultMode","headlightDefaultMode","lightPanel","headlightPanel","setLightPanel","setHeadlightPanel","lightSettings","headlightSettings","setLightSettings","setHeadlightSettings","headlightDeviceNumber","setHeadlightDeviceNumber","serialNumber","headlightSerialNumber","setSerialNumber","setHeadlightSerialNumber","forceSmartMode","headlightForceSmartMode","setForceSmartMode","setHeadlightForceSmartMode","headlightIconTapBehavior","setLightIconTapBehavior","setHeadlightIconTapBehavior","lightIconColor","headlightIconColor","setLightIconColor","setHeadlightIconColor","taillightList","setTaillight","setTaillightModes","setTaillightAdditionalModes","taillightFilterGroups","setTaillightDefaultMode","taillightDefaultMode","taillightPanel","setTaillightPanel","taillightSettings","setTaillightSettings","taillightDeviceNumber","setTaillightDeviceNumber","taillightSerialNumber","setTaillightSerialNumber","taillightForceSmartMode","setTaillightForceSmartMode","taillightIconTapBehavior","setTaillightIconTapBehavior","taillightIconColor","setTaillightIconColor","areRemoteControllersSupported","RemoteControllers","ConfigurationResult","SaveDialogModel","constructor","overrideExisting","saveMode","isNew","this","setSaveMode","makeAutoObservable","isValid","_state$saveDialogMode","setConfiguration","currentUser","parseError","showDeleteDialog","showSaveDialog","saveDialogModel","closeSaveDialog","prevState","closeDeleteDialog","FirebaseService","data","o","newConfiguration","Configuration","parse","Button","disabled","navigator","clipboard","writeText","getConfigurationValue","color","style","marginLeft","openDeleteDialog","Dialog","onClose","DialogTitle","minWidth","DialogContent","DialogContentText","DialogActions","async","autoFocus","RadioGroup","defaultValue","e","target","FormControlLabel","control","Radio","Alert","severity","Box","top","right","bottom","left","position","Fab","openSaveDialog","configurationData","_configurationData","SaveIcon","itemTemplate","createMenuItemColorTemplateFunc","setNewConfiguration","Link","rel","href","UserConfigurations","ParseConfiguration","setDevice","unitList","setUnits","units","timeFormatList","setTimeFormat","timeFormat","getSeparatorColors","getDevice","setSeparatorColor","separatorColor","itemTemplateFunc","DeviceConfiguration"],"sourceRoot":""}